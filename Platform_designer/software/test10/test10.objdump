
test10.elf:     file format elf32-littlenios2
test10.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04040244

Program Header:
    LOAD off    0x00001000 vaddr 0x04040000 paddr 0x04040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04040020 paddr 0x04040020 align 2**12
         filesz 0x00002e98 memsz 0x00002e98 flags r-x
    LOAD off    0x00004000 vaddr 0x00000000 paddr 0x04042eb8 align 2**12
         filesz 0x000016d0 memsz 0x00001830 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04040000  04040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  04040020  04040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002c74  04040244  04040244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000003c  00000000  04042eb8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001694  0000003c  04042ef4  0000403c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  000016d0  04044588  000056d0  2**2
                  ALLOC, SMALL_DATA
  6 .DMEM         00000000  00001830  00001830  000056d0  2**0
                  CONTENTS
  7 .MEMORY       00000000  04044588  04044588  000056d0  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000056d0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000630  00000000  00000000  000056f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00008038  00000000  00000000  00005d28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002e26  00000000  00000000  0000dd60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00002e0a  00000000  00000000  00010b86  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000d84  00000000  00000000  00013990  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001d51  00000000  00000000  00014714  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000c3e  00000000  00000000  00016465  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  000170a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000001d8  00000000  00000000  000170d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000191c5  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  000191c8  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000191cb  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000191cc  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000191cd  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000191d1  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000191d5  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000191d9  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000191e4  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000191ef  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  000191fa  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000028  00000000  00000000  00019205  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0005d64a  00000000  00000000  0001922d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04040000 l    d  .entry	00000000 .entry
04040020 l    d  .exceptions	00000000 .exceptions
04040244 l    d  .text	00000000 .text
00000000 l    d  .rodata	00000000 .rodata
0000003c l    d  .rwdata	00000000 .rwdata
000016d0 l    d  .bss	00000000 .bss
00001830 l    d  .DMEM	00000000 .DMEM
04044588 l    d  .MEMORY	00000000 .MEMORY
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../test10_bsp//obj/HAL/src/crt0.o
0404028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00001718 l     O .bss	00000018 alarm.3025
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 alt_load.c
04040ad0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
04040c38 l     F .text	00000034 alt_dev_reg
00000074 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
04040f44 l     F .text	0000020c altera_avalon_jtag_uart_irq
04041150 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
04041788 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
04041ac0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
04041c14 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04041c40 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
040420b4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
040421f4 l     F .text	0000003c alt_get_errno
04042230 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0000127c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00001710 g     O .bss	00000004 alt_instruction_exception_handler
04040bbc g     F .text	0000007c alt_main
00001730 g     O .bss	00000100 alt_irq
04042ef4 g       *ABS*	00000000 __flash_rwdata_start
00000000 g       *ABS*	00000000 __alt_mem_DMEM
0404032c g     F .text	00000040 lcd_data
040404f4 g     F .text	00000054 update_PWM
000016d0 g     O .bss	00000004 PWM_state
04040290 g     F .text	0000005c lcd_write
00001700 g     O .bss	00000004 altera_avalon_timer_ts_freq
000016d4 g     O .bss	00000004 now
000016a0 g     O .rwdata	00000002 lcd_state
04042650 g     F .text	00000024 altera_nios2_gen2_irq_init
04040000 g     F .entry	0000001c __reset
0404060c g     F .text	00000124 display_PWM
04040020 g       *ABS*	00000000 __flash_exceptions_start
00001714 g     O .bss	00000004 errno
000016f4 g     O .bss	00000004 alt_argv
000096a0 g       *ABS*	00000000 _gp
000010fc g     O .rwdata	00000180 alt_fd_list
0000003c g     O .rwdata	00000010 hello
04042674 g     F .text	00000090 alt_find_dev
04042aa4 g     F .text	00000148 memcpy
040403b4 g     F .text	00000078 lcd_printtext
04042178 g     F .text	0000007c alt_io_redirect
04042eb8 g       *ABS*	00000000 __DTOR_END__
04042940 g     F .text	0000009c alt_exception_cause_generated_bad_addr
04041348 g     F .text	0000021c altera_avalon_jtag_uart_read
0404097c g     F .text	00000064 .hidden __udivsi3
040428b0 g     F .text	00000090 alt_icache_flush
000016b4 g     O .rwdata	00000004 alt_max_fd
000016d8 g     O .bss	00000004 HIGH
000016c8 g     O .rwdata	00000004 _global_impure_ptr
00001830 g       *ABS*	00000000 __bss_end
04041fc4 g     F .text	000000f0 alt_iic_isr_register
04042548 g     F .text	00000108 alt_tick
04041f78 g     F .text	0000004c alt_ic_irq_enabled
040424ac g     F .text	0000009c alt_alarm_stop
00001704 g     O .bss	00000004 alt_irq_active
040400fc g     F .exceptions	000000d4 alt_irq_handler
000010d4 g     O .rwdata	00000028 alt_dev_null
000016dc g     O .bss	00000004 DC
04041bcc g     F .text	00000048 alt_dcache_flush_all
000016d0 g       *ABS*	00000000 __ram_rwdata_end
000016ac g     O .rwdata	00000008 alt_dev_list
04041974 g     F .text	00000020 alt_timestamp_freq
0000003c g       *ABS*	00000000 __ram_rodata_end
04040548 g     F .text	0000004c pwm_init
040409e0 g     F .text	00000058 .hidden __umodsi3
00001830 g       *ABS*	00000000 end
04040e84 g     F .text	000000c0 altera_avalon_jtag_uart_init
040401d0 g     F .exceptions	00000074 alt_instruction_exception_entry
04042eb8 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
04041800 g     F .text	0000007c alt_avalon_timer_sc_init
04041564 g     F .text	00000224 altera_avalon_jtag_uart_write
000016e0 g     O .bss	00000004 wait
04042d04 g     F .text	00000180 __call_exitprocs
04040244 g     F .text	0000004c _start
00001708 g     O .bss	00000004 _alt_tick_rate
0000170c g     O .bss	00000004 _alt_nticks
04040ca4 g     F .text	0000007c alt_sys_init
04042bec g     F .text	00000118 __register_exitproc
040411f0 g     F .text	00000068 altera_avalon_jtag_uart_close
040404a4 g     F .text	00000050 myusleep
0000003c g       *ABS*	00000000 __ram_rwdata_start
00000000 g       *ABS*	00000000 __ram_rodata_start
04040d20 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0404280c g     F .text	000000a4 alt_get_fd
04042a28 g     F .text	0000007c memcmp
04040de0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00001830 g       *ABS*	00000000 __alt_stack_base
04040e30 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000016e4 g     O .bss	00000004 wait_time
04042704 g     F .text	00000108 alt_find_file
04041c7c g     F .text	000000a4 alt_dev_llist_insert
000016d0 g       *ABS*	00000000 __bss_start
04040594 g     F .text	00000078 create_PWM
0404036c g     F .text	00000048 lcd_init
04040730 g     F .text	00000154 main
000016f8 g     O .bss	00000004 alt_envp
04040d80 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0404187c g     F .text	00000078 alt_timestamp_start
000016b8 g     O .rwdata	00000004 alt_errno
04040884 g     F .text	00000084 .hidden __divsi3
04042eb8 g       *ABS*	00000000 __CTOR_END__
04042eb8 g       *ABS*	00000000 __flash_rodata_start
04042eb8 g       *ABS*	00000000 __DTOR_LIST__
04040c6c g     F .text	00000038 alt_irq_init
04042448 g     F .text	00000064 alt_release_fd
040429dc g     F .text	00000014 atexit
04040000 g       *ABS*	00000000 __alt_mem_MEMORY
000016cc g     O .rwdata	00000004 _impure_ptr
000016f0 g     O .bss	00000004 alt_argc
000016fc g     O .bss	00000004 altera_avalon_timer_ts_base
04041d80 g     F .text	00000060 _do_dtors
00000060 g     O .rwdata	00000011 paraPWM
04040020 g       .exceptions	00000000 alt_irq_entry
000016a4 g     O .rwdata	00000008 alt_fs_list
000016e8 g     O .bss	00000004 LOW
04040020 g       *ABS*	00000000 __ram_exceptions_start
040418f4 g     F .text	00000080 alt_timestamp
04041e14 g     F .text	00000050 alt_ic_isr_register
000016d0 g       *ABS*	00000000 _edata
000016ec g     O .bss	00000004 PWM_mark
00001830 g       *ABS*	00000000 _end
04040244 g       *ABS*	00000000 __ram_exceptions_end
04041258 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
04041eec g     F .text	0000008c alt_ic_irq_disable
040429f0 g     F .text	00000038 exit
04040908 g     F .text	00000074 .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
04040020 g     F .exceptions	00000000 alt_exception
040402ec g     F .text	00000040 lcd_cmd
04042e84 g     F .text	00000034 _exit
04041994 g     F .text	0000012c alt_alarm_start
04040a38 g     F .text	00000098 strlen
040422f4 g     F .text	00000154 open
04041de0 g     F .text	00000034 alt_icache_flush_all
000016bc g     O .rwdata	00000004 alt_priority_mask
04041e64 g     F .text	00000088 alt_ic_irq_enable
0404042c g     F .text	00000078 lcd_setcursor
000016c0 g     O .rwdata	00000008 alt_alarm_list
04041d20 g     F .text	00000060 _do_ctors
04041afc g     F .text	000000d0 close
04040b38 g     F .text	00000084 alt_load
0000004c g     O .rwdata	00000011 empty



Disassembly of section .entry:

04040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 4040000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 4040004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 4040008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 404000c:	00bffd16 	blt	zero,r2,4040004 <__flash_rwdata_start+0xffffd110>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4040010:	00410134 	movhi	at,1028
    ori r1, r1, %lo(_start)
 4040014:	08409114 	ori	at,at,580
    jmp r1
 4040018:	0800683a 	jmp	at
 404001c:	00000000 	call	0 <__alt_mem_DMEM>

Disassembly of section .exceptions:

04040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4040020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4040024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4040028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 404002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4040030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4040034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4040038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 404003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4040040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4040044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4040048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 404004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4040050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4040054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4040058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 404005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4040060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4040064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4040068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 404006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4040070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4040074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4040078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 404007c:	10000326 	beq	r2,zero,404008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4040080:	20000226 	beq	r4,zero,404008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4040084:	40400fc0 	call	40400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4040088:	00000706 	br	40400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 404008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4040090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4040094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4040098:	40401d00 	call	40401d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 404009c:	1000021e 	bne	r2,zero,40400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40400f8:	ef80083a 	eret

040400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40400fc:	defff904 	addi	sp,sp,-28
 4040100:	dfc00615 	stw	ra,24(sp)
 4040104:	df000515 	stw	fp,20(sp)
 4040108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 404010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4040110:	0005313a 	rdctl	r2,ipending
 4040114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4040118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 404011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4040120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4040124:	00800044 	movi	r2,1
 4040128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 404012c:	e0fffb17 	ldw	r3,-20(fp)
 4040130:	e0bffc17 	ldw	r2,-16(fp)
 4040134:	1884703a 	and	r2,r3,r2
 4040138:	10001426 	beq	r2,zero,404018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 404013c:	00800034 	movhi	r2,0
 4040140:	1085cc04 	addi	r2,r2,5936
 4040144:	e0fffd17 	ldw	r3,-12(fp)
 4040148:	180690fa 	slli	r3,r3,3
 404014c:	10c5883a 	add	r2,r2,r3
 4040150:	10c00017 	ldw	r3,0(r2)
 4040154:	00800034 	movhi	r2,0
 4040158:	1085cc04 	addi	r2,r2,5936
 404015c:	e13ffd17 	ldw	r4,-12(fp)
 4040160:	200890fa 	slli	r4,r4,3
 4040164:	1105883a 	add	r2,r2,r4
 4040168:	10800104 	addi	r2,r2,4
 404016c:	10800017 	ldw	r2,0(r2)
 4040170:	1009883a 	mov	r4,r2
 4040174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4040178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 404017c:	0005313a 	rdctl	r2,ipending
 4040180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4040184:	e0bfff17 	ldw	r2,-4(fp)
 4040188:	00000706 	br	40401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 404018c:	e0bffc17 	ldw	r2,-16(fp)
 4040190:	1085883a 	add	r2,r2,r2
 4040194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4040198:	e0bffd17 	ldw	r2,-12(fp)
 404019c:	10800044 	addi	r2,r2,1
 40401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40401a4:	003fe106 	br	404012c <__flash_rwdata_start+0xffffd238>

    active = alt_irq_pending ();
 40401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40401ac:	e0bffb17 	ldw	r2,-20(fp)
 40401b0:	103fdb1e 	bne	r2,zero,4040120 <__flash_rwdata_start+0xffffd22c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40401b4:	0001883a 	nop
}
 40401b8:	0001883a 	nop
 40401bc:	e037883a 	mov	sp,fp
 40401c0:	dfc00117 	ldw	ra,4(sp)
 40401c4:	df000017 	ldw	fp,0(sp)
 40401c8:	dec00204 	addi	sp,sp,8
 40401cc:	f800283a 	ret

040401d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40401d0:	defffb04 	addi	sp,sp,-20
 40401d4:	dfc00415 	stw	ra,16(sp)
 40401d8:	df000315 	stw	fp,12(sp)
 40401dc:	df000304 	addi	fp,sp,12
 40401e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 40401e4:	000531fa 	rdctl	r2,exception
 40401e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 40401ec:	e0bffd17 	ldw	r2,-12(fp)
 40401f0:	10801f0c 	andi	r2,r2,124
 40401f4:	1004d0ba 	srli	r2,r2,2
 40401f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 40401fc:	0005333a 	rdctl	r2,badaddr
 4040200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 4040204:	d0a01c17 	ldw	r2,-32656(gp)
 4040208:	10000726 	beq	r2,zero,4040228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 404020c:	d0a01c17 	ldw	r2,-32656(gp)
 4040210:	e0fffd17 	ldw	r3,-12(fp)
 4040214:	e1bffe17 	ldw	r6,-8(fp)
 4040218:	e17fff17 	ldw	r5,-4(fp)
 404021c:	1809883a 	mov	r4,r3
 4040220:	103ee83a 	callr	r2
 4040224:	00000206 	br	4040230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4040228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 404022c:	0005883a 	mov	r2,zero
}
 4040230:	e037883a 	mov	sp,fp
 4040234:	dfc00117 	ldw	ra,4(sp)
 4040238:	df000017 	ldw	fp,0(sp)
 404023c:	dec00204 	addi	sp,sp,8
 4040240:	f800283a 	ret

Disassembly of section .text:

04040244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 4040244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 4040248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 404024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 4040250:	00bffd16 	blt	zero,r2,4040248 <__flash_rwdata_start+0xffffd354>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4040254:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 4040258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 404025c:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
 4040260:	d6a5a814 	ori	gp,gp,38560
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4040264:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
 4040268:	1085b414 	ori	r2,r2,5840

    movhi r3, %hi(__bss_end)
 404026c:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
 4040270:	18c60c14 	ori	r3,r3,6192

    beq r2, r3, 1f
 4040274:	10c00326 	beq	r2,r3,4040284 <_start+0x40>

0:
    stw zero, (r2)
 4040278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 404027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 4040280:	10fffd36 	bltu	r2,r3,4040278 <__flash_rwdata_start+0xffffd384>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4040284:	4040b380 	call	4040b38 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4040288:	4040bbc0 	call	4040bbc <alt_main>

0404028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 404028c:	003fff06 	br	404028c <__flash_rwdata_start+0xffffd398>

04040290 <lcd_write>:
#include <unistd.h>


/*-------------------------------------------------------------*/
void lcd_write(int data)
{
 4040290:	defffd04 	addi	sp,sp,-12
 4040294:	dfc00215 	stw	ra,8(sp)
 4040298:	df000115 	stw	fp,4(sp)
 404029c:	df000104 	addi	fp,sp,4
 40402a0:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, data | 0b00100000000);
 40402a4:	e0bfff17 	ldw	r2,-4(fp)
 40402a8:	10c04014 	ori	r3,r2,256
 40402ac:	00810234 	movhi	r2,1032
 40402b0:	10841c04 	addi	r2,r2,4208
 40402b4:	10c00035 	stwio	r3,0(r2)
	myusleep();
 40402b8:	40404a40 	call	40404a4 <myusleep>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, data & 0b11011111111);
 40402bc:	e0bfff17 	ldw	r2,-4(fp)
 40402c0:	10c1bfcc 	andi	r3,r2,1791
 40402c4:	00810234 	movhi	r2,1032
 40402c8:	10841c04 	addi	r2,r2,4208
 40402cc:	10c00035 	stwio	r3,0(r2)
	myusleep();
 40402d0:	40404a40 	call	40404a4 <myusleep>
}
 40402d4:	0001883a 	nop
 40402d8:	e037883a 	mov	sp,fp
 40402dc:	dfc00117 	ldw	ra,4(sp)
 40402e0:	df000017 	ldw	fp,0(sp)
 40402e4:	dec00204 	addi	sp,sp,8
 40402e8:	f800283a 	ret

040402ec <lcd_cmd>:
void lcd_cmd(char cmd)
{
 40402ec:	defffd04 	addi	sp,sp,-12
 40402f0:	dfc00215 	stw	ra,8(sp)
 40402f4:	df000115 	stw	fp,4(sp)
 40402f8:	df000104 	addi	fp,sp,4
 40402fc:	2005883a 	mov	r2,r4
 4040300:	e0bfff05 	stb	r2,-4(fp)
	lcd_write(0b00100000000 + cmd);
 4040304:	e0bfff07 	ldb	r2,-4(fp)
 4040308:	10804004 	addi	r2,r2,256
 404030c:	1009883a 	mov	r4,r2
 4040310:	40402900 	call	4040290 <lcd_write>
}
 4040314:	0001883a 	nop
 4040318:	e037883a 	mov	sp,fp
 404031c:	dfc00117 	ldw	ra,4(sp)
 4040320:	df000017 	ldw	fp,0(sp)
 4040324:	dec00204 	addi	sp,sp,8
 4040328:	f800283a 	ret

0404032c <lcd_data>:

void lcd_data(char data) {
 404032c:	defffd04 	addi	sp,sp,-12
 4040330:	dfc00215 	stw	ra,8(sp)
 4040334:	df000115 	stw	fp,4(sp)
 4040338:	df000104 	addi	fp,sp,4
 404033c:	2005883a 	mov	r2,r4
 4040340:	e0bfff05 	stb	r2,-4(fp)
	lcd_write(0b10100000000 + data);
 4040344:	e0bfff07 	ldb	r2,-4(fp)
 4040348:	10814004 	addi	r2,r2,1280
 404034c:	1009883a 	mov	r4,r2
 4040350:	40402900 	call	4040290 <lcd_write>
}
 4040354:	0001883a 	nop
 4040358:	e037883a 	mov	sp,fp
 404035c:	dfc00117 	ldw	ra,4(sp)
 4040360:	df000017 	ldw	fp,0(sp)
 4040364:	dec00204 	addi	sp,sp,8
 4040368:	f800283a 	ret

0404036c <lcd_init>:
void lcd_init()
{
 404036c:	defffe04 	addi	sp,sp,-8
 4040370:	dfc00115 	stw	ra,4(sp)
 4040374:	df000015 	stw	fp,0(sp)
 4040378:	d839883a 	mov	fp,sp
	//usleep(30000);
//	lcd_cmd(0x38)
	lcd_write(0b00100111000);
 404037c:	01004e04 	movi	r4,312
 4040380:	40402900 	call	4040290 <lcd_write>
	//usleep(10000);
//	lcd_cmd(0x0C)
	lcd_write(0b00100001100);	// Display On/Off control
 4040384:	01004304 	movi	r4,268
 4040388:	40402900 	call	4040290 <lcd_write>
	//usleep(10000);
//	lcd_cmd(0x06)
	lcd_write(0b00100000110);   // Entry mode set
 404038c:	01004184 	movi	r4,262
 4040390:	40402900 	call	4040290 <lcd_write>
	//usleep(10000);
//	lcd_cmd(0x01)
	lcd_write(0b00100000001);   // Clear screen
 4040394:	01004044 	movi	r4,257
 4040398:	40402900 	call	4040290 <lcd_write>
	//usleep(30000);
}
 404039c:	0001883a 	nop
 40403a0:	e037883a 	mov	sp,fp
 40403a4:	dfc00117 	ldw	ra,4(sp)
 40403a8:	df000017 	ldw	fp,0(sp)
 40403ac:	dec00204 	addi	sp,sp,8
 40403b0:	f800283a 	ret

040403b4 <lcd_printtext>:

void lcd_printtext(unsigned char string[]) {
 40403b4:	defffc04 	addi	sp,sp,-16
 40403b8:	dfc00315 	stw	ra,12(sp)
 40403bc:	df000215 	stw	fp,8(sp)
 40403c0:	df000204 	addi	fp,sp,8
 40403c4:	e13fff15 	stw	r4,-4(fp)
	for (int i = 0; i < strlen(string); i++)
 40403c8:	e03ffe15 	stw	zero,-8(fp)
 40403cc:	00000c06 	br	4040400 <lcd_printtext+0x4c>
		lcd_data(string[i]);
 40403d0:	e0bffe17 	ldw	r2,-8(fp)
 40403d4:	e0ffff17 	ldw	r3,-4(fp)
 40403d8:	1885883a 	add	r2,r3,r2
 40403dc:	10800003 	ldbu	r2,0(r2)
 40403e0:	10803fcc 	andi	r2,r2,255
 40403e4:	1080201c 	xori	r2,r2,128
 40403e8:	10bfe004 	addi	r2,r2,-128
 40403ec:	1009883a 	mov	r4,r2
 40403f0:	404032c0 	call	404032c <lcd_data>
	lcd_write(0b00100000001);   // Clear screen
	//usleep(30000);
}

void lcd_printtext(unsigned char string[]) {
	for (int i = 0; i < strlen(string); i++)
 40403f4:	e0bffe17 	ldw	r2,-8(fp)
 40403f8:	10800044 	addi	r2,r2,1
 40403fc:	e0bffe15 	stw	r2,-8(fp)
 4040400:	e13fff17 	ldw	r4,-4(fp)
 4040404:	4040a380 	call	4040a38 <strlen>
 4040408:	1007883a 	mov	r3,r2
 404040c:	e0bffe17 	ldw	r2,-8(fp)
 4040410:	10ffef36 	bltu	r2,r3,40403d0 <__flash_rwdata_start+0xffffd4dc>
		lcd_data(string[i]);
}
 4040414:	0001883a 	nop
 4040418:	e037883a 	mov	sp,fp
 404041c:	dfc00117 	ldw	ra,4(sp)
 4040420:	df000017 	ldw	fp,0(sp)
 4040424:	dec00204 	addi	sp,sp,8
 4040428:	f800283a 	ret

0404042c <lcd_setcursor>:

/*Check code again*/
void lcd_setcursor(char row, char col) {
 404042c:	defffb04 	addi	sp,sp,-20
 4040430:	dfc00415 	stw	ra,16(sp)
 4040434:	df000315 	stw	fp,12(sp)
 4040438:	df000304 	addi	fp,sp,12
 404043c:	2007883a 	mov	r3,r4
 4040440:	2805883a 	mov	r2,r5
 4040444:	e0fffe05 	stb	r3,-8(fp)
 4040448:	e0bfff05 	stb	r2,-4(fp)
	int row_char = 0;
 404044c:	e03ffd15 	stw	zero,-12(fp)
	if (row == 1) row_char = 64;
 4040450:	e0bffe07 	ldb	r2,-8(fp)
 4040454:	10800058 	cmpnei	r2,r2,1
 4040458:	1000021e 	bne	r2,zero,4040464 <lcd_setcursor+0x38>
 404045c:	00801004 	movi	r2,64
 4040460:	e0bffd15 	stw	r2,-12(fp)
	lcd_cmd(0b00010000000 + row_char + col);
 4040464:	e0bffd17 	ldw	r2,-12(fp)
 4040468:	1007883a 	mov	r3,r2
 404046c:	e0bfff03 	ldbu	r2,-4(fp)
 4040470:	1885883a 	add	r2,r3,r2
 4040474:	10bfe004 	addi	r2,r2,-128
 4040478:	10803fcc 	andi	r2,r2,255
 404047c:	1080201c 	xori	r2,r2,128
 4040480:	10bfe004 	addi	r2,r2,-128
 4040484:	1009883a 	mov	r4,r2
 4040488:	40402ec0 	call	40402ec <lcd_cmd>
}
 404048c:	0001883a 	nop
 4040490:	e037883a 	mov	sp,fp
 4040494:	dfc00117 	ldw	ra,4(sp)
 4040498:	df000017 	ldw	fp,0(sp)
 404049c:	dec00204 	addi	sp,sp,8
 40404a0:	f800283a 	ret

040404a4 <myusleep>:
unsigned long HIGH, LOW, wait_time, wait;
unsigned long now, PWM_mark, PWM_state;
unsigned long DC;

void myusleep()
{
 40404a4:	defffe04 	addi	sp,sp,-8
 40404a8:	dfc00115 	stw	ra,4(sp)
 40404ac:	df000015 	stw	fp,0(sp)
 40404b0:	d839883a 	mov	fp,sp
	wait = alt_timestamp();
 40404b4:	40418f40 	call	40418f4 <alt_timestamp>
 40404b8:	d0a01015 	stw	r2,-32704(gp)
	while (alt_timestamp() - wait < 5000) create_PWM();
 40404bc:	00000106 	br	40404c4 <myusleep+0x20>
 40404c0:	40405940 	call	4040594 <create_PWM>
 40404c4:	40418f40 	call	40418f4 <alt_timestamp>
 40404c8:	1007883a 	mov	r3,r2
 40404cc:	d0a01017 	ldw	r2,-32704(gp)
 40404d0:	1885c83a 	sub	r2,r3,r2
 40404d4:	1084e230 	cmpltui	r2,r2,5000
 40404d8:	103ff91e 	bne	r2,zero,40404c0 <__flash_rwdata_start+0xffffd5cc>
}
 40404dc:	0001883a 	nop
 40404e0:	e037883a 	mov	sp,fp
 40404e4:	dfc00117 	ldw	ra,4(sp)
 40404e8:	df000017 	ldw	fp,0(sp)
 40404ec:	dec00204 	addi	sp,sp,8
 40404f0:	f800283a 	ret

040404f4 <update_PWM>:

void update_PWM()
{
 40404f4:	defffe04 	addi	sp,sp,-8
 40404f8:	dfc00115 	stw	ra,4(sp)
 40404fc:	df000015 	stw	fp,0(sp)
 4040500:	d839883a 	mov	fp,sp
	//ADJUST f and DC => calculate the number of clocks

	HIGH = 50000*DC/100;
 4040504:	d0e00f17 	ldw	r3,-32708(gp)
 4040508:	00b0d414 	movui	r2,50000
 404050c:	1885383a 	mul	r2,r3,r2
 4040510:	01401904 	movi	r5,100
 4040514:	1009883a 	mov	r4,r2
 4040518:	404097c0 	call	404097c <__udivsi3>
 404051c:	d0a00e15 	stw	r2,-32712(gp)
	LOW = 50000 - HIGH;
 4040520:	d0a00e17 	ldw	r2,-32712(gp)
 4040524:	00f0d414 	movui	r3,50000
 4040528:	1885c83a 	sub	r2,r3,r2
 404052c:	d0a01215 	stw	r2,-32696(gp)
}
 4040530:	0001883a 	nop
 4040534:	e037883a 	mov	sp,fp
 4040538:	dfc00117 	ldw	ra,4(sp)
 404053c:	df000017 	ldw	fp,0(sp)
 4040540:	dec00204 	addi	sp,sp,8
 4040544:	f800283a 	ret

04040548 <pwm_init>:

void pwm_init()
{
 4040548:	defffe04 	addi	sp,sp,-8
 404054c:	dfc00115 	stw	ra,4(sp)
 4040550:	df000015 	stw	fp,0(sp)
 4040554:	d839883a 	mov	fp,sp
	DC = 50;
 4040558:	00800c84 	movi	r2,50
 404055c:	d0a00f15 	stw	r2,-32708(gp)
	update_PWM();
 4040560:	40404f40 	call	40404f4 <update_PWM>
	PWM_state = 0;
 4040564:	d0200c15 	stw	zero,-32720(gp)
	wait_time = LOW;
 4040568:	d0a01217 	ldw	r2,-32696(gp)
 404056c:	d0a01115 	stw	r2,-32700(gp)
	alt_timestamp_start();
 4040570:	404187c0 	call	404187c <alt_timestamp_start>
	PWM_mark = alt_timestamp();
 4040574:	40418f40 	call	40418f4 <alt_timestamp>
 4040578:	d0a01315 	stw	r2,-32692(gp)
}
 404057c:	0001883a 	nop
 4040580:	e037883a 	mov	sp,fp
 4040584:	dfc00117 	ldw	ra,4(sp)
 4040588:	df000017 	ldw	fp,0(sp)
 404058c:	dec00204 	addi	sp,sp,8
 4040590:	f800283a 	ret

04040594 <create_PWM>:

void create_PWM()
{
 4040594:	defffe04 	addi	sp,sp,-8
 4040598:	dfc00115 	stw	ra,4(sp)
 404059c:	df000015 	stw	fp,0(sp)
 40405a0:	d839883a 	mov	fp,sp
	  now = alt_timestamp();
 40405a4:	40418f40 	call	40418f4 <alt_timestamp>
 40405a8:	d0a00d15 	stw	r2,-32716(gp)
	  if (now - PWM_mark  >= wait_time)
 40405ac:	d0e00d17 	ldw	r3,-32716(gp)
 40405b0:	d0a01317 	ldw	r2,-32692(gp)
 40405b4:	1887c83a 	sub	r3,r3,r2
 40405b8:	d0a01117 	ldw	r2,-32700(gp)
 40405bc:	18800d36 	bltu	r3,r2,40405f4 <create_PWM+0x60>
	  {

		  PWM_state = !PWM_state;
 40405c0:	d0a00c17 	ldw	r2,-32720(gp)
 40405c4:	1005003a 	cmpeq	r2,r2,zero
 40405c8:	10803fcc 	andi	r2,r2,255
 40405cc:	d0a00c15 	stw	r2,-32720(gp)

	  if (PWM_state == 0) wait_time = LOW;
 40405d0:	d0a00c17 	ldw	r2,-32720(gp)
 40405d4:	1000031e 	bne	r2,zero,40405e4 <create_PWM+0x50>
 40405d8:	d0a01217 	ldw	r2,-32696(gp)
 40405dc:	d0a01115 	stw	r2,-32700(gp)
 40405e0:	00000206 	br	40405ec <create_PWM+0x58>
	  else                wait_time = HIGH;
 40405e4:	d0a00e17 	ldw	r2,-32712(gp)
 40405e8:	d0a01115 	stw	r2,-32700(gp)

		  PWM_mark = alt_timestamp();
 40405ec:	40418f40 	call	40418f4 <alt_timestamp>
 40405f0:	d0a01315 	stw	r2,-32692(gp)
	  }
}
 40405f4:	0001883a 	nop
 40405f8:	e037883a 	mov	sp,fp
 40405fc:	dfc00117 	ldw	ra,4(sp)
 4040600:	df000017 	ldw	fp,0(sp)
 4040604:	dec00204 	addi	sp,sp,8
 4040608:	f800283a 	ret

0404060c <display_PWM>:
unsigned char paraPWM[]    = "f: 1KHz DC:    %";


/*----------------------------------------------------------------*/
void display_PWM()
{
 404060c:	defffc04 	addi	sp,sp,-16
 4040610:	dfc00315 	stw	ra,12(sp)
 4040614:	df000215 	stw	fp,8(sp)
 4040618:	df000204 	addi	fp,sp,8
	lcd_setcursor(1,0);
 404061c:	000b883a 	mov	r5,zero
 4040620:	01000044 	movi	r4,1
 4040624:	404042c0 	call	404042c <lcd_setcursor>
			  lcd_printtext(paraPWM);
 4040628:	01000034 	movhi	r4,0
 404062c:	21001804 	addi	r4,r4,96
 4040630:	40403b40 	call	40403b4 <lcd_printtext>
			  lcd_setcursor(1,12);
 4040634:	01400304 	movi	r5,12
 4040638:	01000044 	movi	r4,1
 404063c:	404042c0 	call	404042c <lcd_setcursor>
			  unsigned long num = DC;
 4040640:	d0a00f17 	ldw	r2,-32708(gp)
 4040644:	e0bffe15 	stw	r2,-8(fp)
			  unsigned long a = num/100;
 4040648:	e0bffe17 	ldw	r2,-8(fp)
 404064c:	01401904 	movi	r5,100
 4040650:	1009883a 	mov	r4,r2
 4040654:	404097c0 	call	404097c <__udivsi3>
 4040658:	e0bfff15 	stw	r2,-4(fp)
			  if (a==0) lcd_printtext(" ");
 404065c:	e0bfff17 	ldw	r2,-4(fp)
 4040660:	1000041e 	bne	r2,zero,4040674 <display_PWM+0x68>
 4040664:	01000034 	movhi	r4,0
 4040668:	21000004 	addi	r4,r4,0
 404066c:	40403b40 	call	40403b4 <lcd_printtext>
 4040670:	00000706 	br	4040690 <display_PWM+0x84>
			  else lcd_data(a + 0x30);
 4040674:	e0bfff17 	ldw	r2,-4(fp)
 4040678:	10800c04 	addi	r2,r2,48
 404067c:	10803fcc 	andi	r2,r2,255
 4040680:	1080201c 	xori	r2,r2,128
 4040684:	10bfe004 	addi	r2,r2,-128
 4040688:	1009883a 	mov	r4,r2
 404068c:	404032c0 	call	404032c <lcd_data>
			  lcd_setcursor(1,13);
 4040690:	01400344 	movi	r5,13
 4040694:	01000044 	movi	r4,1
 4040698:	404042c0 	call	404042c <lcd_setcursor>
			  num = num - a*100;
 404069c:	e0bfff17 	ldw	r2,-4(fp)
 40406a0:	10801924 	muli	r2,r2,100
 40406a4:	e0fffe17 	ldw	r3,-8(fp)
 40406a8:	1885c83a 	sub	r2,r3,r2
 40406ac:	e0bffe15 	stw	r2,-8(fp)
			  a = num/10;
 40406b0:	e0bffe17 	ldw	r2,-8(fp)
 40406b4:	01400284 	movi	r5,10
 40406b8:	1009883a 	mov	r4,r2
 40406bc:	404097c0 	call	404097c <__udivsi3>
 40406c0:	e0bfff15 	stw	r2,-4(fp)
			  lcd_data(a+0x30);
 40406c4:	e0bfff17 	ldw	r2,-4(fp)
 40406c8:	10800c04 	addi	r2,r2,48
 40406cc:	10803fcc 	andi	r2,r2,255
 40406d0:	1080201c 	xori	r2,r2,128
 40406d4:	10bfe004 	addi	r2,r2,-128
 40406d8:	1009883a 	mov	r4,r2
 40406dc:	404032c0 	call	404032c <lcd_data>
			  num = num - a*10;
 40406e0:	e0bfff17 	ldw	r2,-4(fp)
 40406e4:	108002a4 	muli	r2,r2,10
 40406e8:	e0fffe17 	ldw	r3,-8(fp)
 40406ec:	1885c83a 	sub	r2,r3,r2
 40406f0:	e0bffe15 	stw	r2,-8(fp)
			  a = num/1;
 40406f4:	e0bffe17 	ldw	r2,-8(fp)
 40406f8:	e0bfff15 	stw	r2,-4(fp)
			  lcd_data(a+0x30);
 40406fc:	e0bfff17 	ldw	r2,-4(fp)
 4040700:	10800c04 	addi	r2,r2,48
 4040704:	10803fcc 	andi	r2,r2,255
 4040708:	1080201c 	xori	r2,r2,128
 404070c:	10bfe004 	addi	r2,r2,-128
 4040710:	1009883a 	mov	r4,r2
 4040714:	404032c0 	call	404032c <lcd_data>
}
 4040718:	0001883a 	nop
 404071c:	e037883a 	mov	sp,fp
 4040720:	dfc00117 	ldw	ra,4(sp)
 4040724:	df000017 	ldw	fp,0(sp)
 4040728:	dec00204 	addi	sp,sp,8
 404072c:	f800283a 	ret

04040730 <main>:

/*----------------------------------------------------------------*/


int main()
{
 4040730:	defffe04 	addi	sp,sp,-8
 4040734:	dfc00115 	stw	ra,4(sp)
 4040738:	df000015 	stw	fp,0(sp)
 404073c:	d839883a 	mov	fp,sp
	  static alt_alarm alarm;
	  //unsigned short MOTOR_state = 0;
	  pwm_init();
 4040740:	40405480 	call	4040548 <pwm_init>
	  lcd_init();
 4040744:	404036c0 	call	404036c <lcd_init>

	  while(1){

/* SWITCH 0 turn on*/

	  if ((IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE)&1)== 0X01)
 4040748:	00810234 	movhi	r2,1032
 404074c:	10841404 	addi	r2,r2,4176
 4040750:	10800037 	ldwio	r2,0(r2)
 4040754:	1080004c 	andi	r2,r2,1
 4040758:	10000726 	beq	r2,zero,4040778 <main+0x48>

		  				// Init LCD
//		  alt_alarm_start(&alarm, alt_ticks_per_second(), helloword_alarm, NULL);


		  lcd_setcursor(0,1);
 404075c:	01400044 	movi	r5,1
 4040760:	0009883a 	mov	r4,zero
 4040764:	404042c0 	call	404042c <lcd_setcursor>
		  lcd_printtext(hello);		// Print "Hello World!!!"
 4040768:	01000034 	movhi	r4,0
 404076c:	21000f04 	addi	r4,r4,60
 4040770:	40403b40 	call	40403b4 <lcd_printtext>
 4040774:	00000806 	br	4040798 <main+0x68>
	  }
	  else
	  {
		  lcd_state = 1;
 4040778:	00800044 	movi	r2,1
 404077c:	d0a0000d 	sth	r2,-32768(gp)
		  lcd_setcursor(0,0);
 4040780:	000b883a 	mov	r5,zero
 4040784:	0009883a 	mov	r4,zero
 4040788:	404042c0 	call	404042c <lcd_setcursor>
		  lcd_printtext(empty);
 404078c:	01000034 	movhi	r4,0
 4040790:	21001304 	addi	r4,r4,76
 4040794:	40403b40 	call	40403b4 <lcd_printtext>
	  }
/* CAN ADD CASE OF SWITCH TO CHANGE THE SPEED OF MOTOR*/
/* SWITCH 1 turn on*/


	  if (((IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE) >> 1) & 1) == 1)
 4040798:	00810234 	movhi	r2,1032
 404079c:	10841404 	addi	r2,r2,4176
 40407a0:	10800037 	ldwio	r2,0(r2)
 40407a4:	1080008c 	andi	r2,r2,2
 40407a8:	10000b26 	beq	r2,zero,40407d8 <main+0xa8>
	  {

//		  lcd_setcursor(1,0);
//		  lcd_printtext(paraPWM);
//		  IOWR_ALTERA_AVALON_PIO_DATA(MOTOR_BASE, PWM_state);
		  DC = 50;
 40407ac:	00800c84 	movi	r2,50
 40407b0:	d0a00f15 	stw	r2,-32708(gp)
		  update_PWM();
 40407b4:	40404f40 	call	40404f4 <update_PWM>
		  create_PWM();
 40407b8:	40405940 	call	4040594 <create_PWM>
		  IOWR_ALTERA_AVALON_PIO_DATA(MOTOR_BASE, PWM_state);
 40407bc:	d0a00c17 	ldw	r2,-32720(gp)
 40407c0:	1007883a 	mov	r3,r2
 40407c4:	00810234 	movhi	r2,1032
 40407c8:	10841004 	addi	r2,r2,4160
 40407cc:	10c00035 	stwio	r3,0(r2)
		  display_PWM();
 40407d0:	404060c0 	call	404060c <display_PWM>
 40407d4:	003fdc06 	br	4040748 <__flash_rwdata_start+0xffffd854>
	  }
	  else if (((IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE) >> 2) & 1) == 1)
 40407d8:	00810234 	movhi	r2,1032
 40407dc:	10841404 	addi	r2,r2,4176
 40407e0:	10800037 	ldwio	r2,0(r2)
 40407e4:	1080010c 	andi	r2,r2,4
 40407e8:	10000b26 	beq	r2,zero,4040818 <main+0xe8>
	  {
//		  IOWR_ALTERA_AVALON_PIO_DATA(MOTOR_BASE, PWM_state);
		  DC = 100;
 40407ec:	00801904 	movi	r2,100
 40407f0:	d0a00f15 	stw	r2,-32708(gp)
		  update_PWM();
 40407f4:	40404f40 	call	40404f4 <update_PWM>
		  create_PWM();
 40407f8:	40405940 	call	4040594 <create_PWM>
		  IOWR_ALTERA_AVALON_PIO_DATA(MOTOR_BASE, PWM_state);
 40407fc:	d0a00c17 	ldw	r2,-32720(gp)
 4040800:	1007883a 	mov	r3,r2
 4040804:	00810234 	movhi	r2,1032
 4040808:	10841004 	addi	r2,r2,4160
 404080c:	10c00035 	stwio	r3,0(r2)
		  display_PWM();
 4040810:	404060c0 	call	404060c <display_PWM>
 4040814:	003fcc06 	br	4040748 <__flash_rwdata_start+0xffffd854>
	  }
	  else if (((IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE) >> 3) & 1) == 1)
 4040818:	00810234 	movhi	r2,1032
 404081c:	10841404 	addi	r2,r2,4176
 4040820:	10800037 	ldwio	r2,0(r2)
 4040824:	1080020c 	andi	r2,r2,8
 4040828:	10000b26 	beq	r2,zero,4040858 <main+0x128>
	  {
//		  IOWR_ALTERA_AVALON_PIO_DATA(MOTOR_BASE, PWM_state);
		  DC = 25;
 404082c:	00800644 	movi	r2,25
 4040830:	d0a00f15 	stw	r2,-32708(gp)
		  update_PWM();
 4040834:	40404f40 	call	40404f4 <update_PWM>
		  create_PWM();
 4040838:	40405940 	call	4040594 <create_PWM>
		  IOWR_ALTERA_AVALON_PIO_DATA(MOTOR_BASE, PWM_state);
 404083c:	d0a00c17 	ldw	r2,-32720(gp)
 4040840:	1007883a 	mov	r3,r2
 4040844:	00810234 	movhi	r2,1032
 4040848:	10841004 	addi	r2,r2,4160
 404084c:	10c00035 	stwio	r3,0(r2)
		  display_PWM();
 4040850:	404060c0 	call	404060c <display_PWM>
 4040854:	003fbc06 	br	4040748 <__flash_rwdata_start+0xffffd854>
	  }
	  else
	  {
		  IOWR_ALTERA_AVALON_PIO_DATA(MOTOR_BASE, 0);
 4040858:	0007883a 	mov	r3,zero
 404085c:	00810234 	movhi	r2,1032
 4040860:	10841004 	addi	r2,r2,4160
 4040864:	10c00035 	stwio	r3,0(r2)
		  lcd_setcursor(1,0);
 4040868:	000b883a 	mov	r5,zero
 404086c:	01000044 	movi	r4,1
 4040870:	404042c0 	call	404042c <lcd_setcursor>
		  lcd_printtext(empty);
 4040874:	01000034 	movhi	r4,0
 4040878:	21001304 	addi	r4,r4,76
 404087c:	40403b40 	call	40403b4 <lcd_printtext>
//		  lcd_data(a+0x30);
//		  num = num - a*10;
//		  lcd_data(num+0x30);
//	  }

  }
 4040880:	003fb106 	br	4040748 <__flash_rwdata_start+0xffffd854>

04040884 <__divsi3>:
 4040884:	20001b16 	blt	r4,zero,40408f4 <__divsi3+0x70>
 4040888:	000f883a 	mov	r7,zero
 404088c:	28001616 	blt	r5,zero,40408e8 <__divsi3+0x64>
 4040890:	200d883a 	mov	r6,r4
 4040894:	29001a2e 	bgeu	r5,r4,4040900 <__divsi3+0x7c>
 4040898:	00800804 	movi	r2,32
 404089c:	00c00044 	movi	r3,1
 40408a0:	00000106 	br	40408a8 <__divsi3+0x24>
 40408a4:	10000d26 	beq	r2,zero,40408dc <__divsi3+0x58>
 40408a8:	294b883a 	add	r5,r5,r5
 40408ac:	10bfffc4 	addi	r2,r2,-1
 40408b0:	18c7883a 	add	r3,r3,r3
 40408b4:	293ffb36 	bltu	r5,r4,40408a4 <__flash_rwdata_start+0xffffd9b0>
 40408b8:	0005883a 	mov	r2,zero
 40408bc:	18000726 	beq	r3,zero,40408dc <__divsi3+0x58>
 40408c0:	0005883a 	mov	r2,zero
 40408c4:	31400236 	bltu	r6,r5,40408d0 <__divsi3+0x4c>
 40408c8:	314dc83a 	sub	r6,r6,r5
 40408cc:	10c4b03a 	or	r2,r2,r3
 40408d0:	1806d07a 	srli	r3,r3,1
 40408d4:	280ad07a 	srli	r5,r5,1
 40408d8:	183ffa1e 	bne	r3,zero,40408c4 <__flash_rwdata_start+0xffffd9d0>
 40408dc:	38000126 	beq	r7,zero,40408e4 <__divsi3+0x60>
 40408e0:	0085c83a 	sub	r2,zero,r2
 40408e4:	f800283a 	ret
 40408e8:	014bc83a 	sub	r5,zero,r5
 40408ec:	39c0005c 	xori	r7,r7,1
 40408f0:	003fe706 	br	4040890 <__flash_rwdata_start+0xffffd99c>
 40408f4:	0109c83a 	sub	r4,zero,r4
 40408f8:	01c00044 	movi	r7,1
 40408fc:	003fe306 	br	404088c <__flash_rwdata_start+0xffffd998>
 4040900:	00c00044 	movi	r3,1
 4040904:	003fee06 	br	40408c0 <__flash_rwdata_start+0xffffd9cc>

04040908 <__modsi3>:
 4040908:	20001716 	blt	r4,zero,4040968 <__modsi3+0x60>
 404090c:	000f883a 	mov	r7,zero
 4040910:	2005883a 	mov	r2,r4
 4040914:	28001216 	blt	r5,zero,4040960 <__modsi3+0x58>
 4040918:	2900162e 	bgeu	r5,r4,4040974 <__modsi3+0x6c>
 404091c:	01800804 	movi	r6,32
 4040920:	00c00044 	movi	r3,1
 4040924:	00000106 	br	404092c <__modsi3+0x24>
 4040928:	30000a26 	beq	r6,zero,4040954 <__modsi3+0x4c>
 404092c:	294b883a 	add	r5,r5,r5
 4040930:	31bfffc4 	addi	r6,r6,-1
 4040934:	18c7883a 	add	r3,r3,r3
 4040938:	293ffb36 	bltu	r5,r4,4040928 <__flash_rwdata_start+0xffffda34>
 404093c:	18000526 	beq	r3,zero,4040954 <__modsi3+0x4c>
 4040940:	1806d07a 	srli	r3,r3,1
 4040944:	11400136 	bltu	r2,r5,404094c <__modsi3+0x44>
 4040948:	1145c83a 	sub	r2,r2,r5
 404094c:	280ad07a 	srli	r5,r5,1
 4040950:	183ffb1e 	bne	r3,zero,4040940 <__flash_rwdata_start+0xffffda4c>
 4040954:	38000126 	beq	r7,zero,404095c <__modsi3+0x54>
 4040958:	0085c83a 	sub	r2,zero,r2
 404095c:	f800283a 	ret
 4040960:	014bc83a 	sub	r5,zero,r5
 4040964:	003fec06 	br	4040918 <__flash_rwdata_start+0xffffda24>
 4040968:	0109c83a 	sub	r4,zero,r4
 404096c:	01c00044 	movi	r7,1
 4040970:	003fe706 	br	4040910 <__flash_rwdata_start+0xffffda1c>
 4040974:	00c00044 	movi	r3,1
 4040978:	003ff106 	br	4040940 <__flash_rwdata_start+0xffffda4c>

0404097c <__udivsi3>:
 404097c:	200d883a 	mov	r6,r4
 4040980:	2900152e 	bgeu	r5,r4,40409d8 <__udivsi3+0x5c>
 4040984:	28001416 	blt	r5,zero,40409d8 <__udivsi3+0x5c>
 4040988:	00800804 	movi	r2,32
 404098c:	00c00044 	movi	r3,1
 4040990:	00000206 	br	404099c <__udivsi3+0x20>
 4040994:	10000e26 	beq	r2,zero,40409d0 <__udivsi3+0x54>
 4040998:	28000516 	blt	r5,zero,40409b0 <__udivsi3+0x34>
 404099c:	294b883a 	add	r5,r5,r5
 40409a0:	10bfffc4 	addi	r2,r2,-1
 40409a4:	18c7883a 	add	r3,r3,r3
 40409a8:	293ffa36 	bltu	r5,r4,4040994 <__flash_rwdata_start+0xffffdaa0>
 40409ac:	18000826 	beq	r3,zero,40409d0 <__udivsi3+0x54>
 40409b0:	0005883a 	mov	r2,zero
 40409b4:	31400236 	bltu	r6,r5,40409c0 <__udivsi3+0x44>
 40409b8:	314dc83a 	sub	r6,r6,r5
 40409bc:	10c4b03a 	or	r2,r2,r3
 40409c0:	1806d07a 	srli	r3,r3,1
 40409c4:	280ad07a 	srli	r5,r5,1
 40409c8:	183ffa1e 	bne	r3,zero,40409b4 <__flash_rwdata_start+0xffffdac0>
 40409cc:	f800283a 	ret
 40409d0:	0005883a 	mov	r2,zero
 40409d4:	f800283a 	ret
 40409d8:	00c00044 	movi	r3,1
 40409dc:	003ff406 	br	40409b0 <__flash_rwdata_start+0xffffdabc>

040409e0 <__umodsi3>:
 40409e0:	2005883a 	mov	r2,r4
 40409e4:	2900122e 	bgeu	r5,r4,4040a30 <__umodsi3+0x50>
 40409e8:	28001116 	blt	r5,zero,4040a30 <__umodsi3+0x50>
 40409ec:	01800804 	movi	r6,32
 40409f0:	00c00044 	movi	r3,1
 40409f4:	00000206 	br	4040a00 <__umodsi3+0x20>
 40409f8:	30000c26 	beq	r6,zero,4040a2c <__umodsi3+0x4c>
 40409fc:	28000516 	blt	r5,zero,4040a14 <__umodsi3+0x34>
 4040a00:	294b883a 	add	r5,r5,r5
 4040a04:	31bfffc4 	addi	r6,r6,-1
 4040a08:	18c7883a 	add	r3,r3,r3
 4040a0c:	293ffa36 	bltu	r5,r4,40409f8 <__flash_rwdata_start+0xffffdb04>
 4040a10:	18000626 	beq	r3,zero,4040a2c <__umodsi3+0x4c>
 4040a14:	1806d07a 	srli	r3,r3,1
 4040a18:	11400136 	bltu	r2,r5,4040a20 <__umodsi3+0x40>
 4040a1c:	1145c83a 	sub	r2,r2,r5
 4040a20:	280ad07a 	srli	r5,r5,1
 4040a24:	183ffb1e 	bne	r3,zero,4040a14 <__flash_rwdata_start+0xffffdb20>
 4040a28:	f800283a 	ret
 4040a2c:	f800283a 	ret
 4040a30:	00c00044 	movi	r3,1
 4040a34:	003ff706 	br	4040a14 <__flash_rwdata_start+0xffffdb20>

04040a38 <strlen>:
 4040a38:	208000cc 	andi	r2,r4,3
 4040a3c:	10002026 	beq	r2,zero,4040ac0 <strlen+0x88>
 4040a40:	20800007 	ldb	r2,0(r4)
 4040a44:	10002026 	beq	r2,zero,4040ac8 <strlen+0x90>
 4040a48:	2005883a 	mov	r2,r4
 4040a4c:	00000206 	br	4040a58 <strlen+0x20>
 4040a50:	10c00007 	ldb	r3,0(r2)
 4040a54:	18001826 	beq	r3,zero,4040ab8 <strlen+0x80>
 4040a58:	10800044 	addi	r2,r2,1
 4040a5c:	10c000cc 	andi	r3,r2,3
 4040a60:	183ffb1e 	bne	r3,zero,4040a50 <__flash_rwdata_start+0xffffdb5c>
 4040a64:	10c00017 	ldw	r3,0(r2)
 4040a68:	01ffbff4 	movhi	r7,65279
 4040a6c:	39ffbfc4 	addi	r7,r7,-257
 4040a70:	00ca303a 	nor	r5,zero,r3
 4040a74:	01a02074 	movhi	r6,32897
 4040a78:	19c7883a 	add	r3,r3,r7
 4040a7c:	31a02004 	addi	r6,r6,-32640
 4040a80:	1946703a 	and	r3,r3,r5
 4040a84:	1986703a 	and	r3,r3,r6
 4040a88:	1800091e 	bne	r3,zero,4040ab0 <strlen+0x78>
 4040a8c:	10800104 	addi	r2,r2,4
 4040a90:	10c00017 	ldw	r3,0(r2)
 4040a94:	19cb883a 	add	r5,r3,r7
 4040a98:	00c6303a 	nor	r3,zero,r3
 4040a9c:	28c6703a 	and	r3,r5,r3
 4040aa0:	1986703a 	and	r3,r3,r6
 4040aa4:	183ff926 	beq	r3,zero,4040a8c <__flash_rwdata_start+0xffffdb98>
 4040aa8:	00000106 	br	4040ab0 <strlen+0x78>
 4040aac:	10800044 	addi	r2,r2,1
 4040ab0:	10c00007 	ldb	r3,0(r2)
 4040ab4:	183ffd1e 	bne	r3,zero,4040aac <__flash_rwdata_start+0xffffdbb8>
 4040ab8:	1105c83a 	sub	r2,r2,r4
 4040abc:	f800283a 	ret
 4040ac0:	2005883a 	mov	r2,r4
 4040ac4:	003fe706 	br	4040a64 <__flash_rwdata_start+0xffffdb70>
 4040ac8:	0005883a 	mov	r2,zero
 4040acc:	f800283a 	ret

04040ad0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 4040ad0:	defffc04 	addi	sp,sp,-16
 4040ad4:	df000315 	stw	fp,12(sp)
 4040ad8:	df000304 	addi	fp,sp,12
 4040adc:	e13ffd15 	stw	r4,-12(fp)
 4040ae0:	e17ffe15 	stw	r5,-8(fp)
 4040ae4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 4040ae8:	e0fffe17 	ldw	r3,-8(fp)
 4040aec:	e0bffd17 	ldw	r2,-12(fp)
 4040af0:	18800c26 	beq	r3,r2,4040b24 <alt_load_section+0x54>
  {
    while( to != end )
 4040af4:	00000806 	br	4040b18 <alt_load_section+0x48>
    {
      *to++ = *from++;
 4040af8:	e0bffe17 	ldw	r2,-8(fp)
 4040afc:	10c00104 	addi	r3,r2,4
 4040b00:	e0fffe15 	stw	r3,-8(fp)
 4040b04:	e0fffd17 	ldw	r3,-12(fp)
 4040b08:	19000104 	addi	r4,r3,4
 4040b0c:	e13ffd15 	stw	r4,-12(fp)
 4040b10:	18c00017 	ldw	r3,0(r3)
 4040b14:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 4040b18:	e0fffe17 	ldw	r3,-8(fp)
 4040b1c:	e0bfff17 	ldw	r2,-4(fp)
 4040b20:	18bff51e 	bne	r3,r2,4040af8 <__flash_rwdata_start+0xffffdc04>
    {
      *to++ = *from++;
    }
  }
}
 4040b24:	0001883a 	nop
 4040b28:	e037883a 	mov	sp,fp
 4040b2c:	df000017 	ldw	fp,0(sp)
 4040b30:	dec00104 	addi	sp,sp,4
 4040b34:	f800283a 	ret

04040b38 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 4040b38:	defffe04 	addi	sp,sp,-8
 4040b3c:	dfc00115 	stw	ra,4(sp)
 4040b40:	df000015 	stw	fp,0(sp)
 4040b44:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 4040b48:	01800034 	movhi	r6,0
 4040b4c:	3185b404 	addi	r6,r6,5840
 4040b50:	01400034 	movhi	r5,0
 4040b54:	29400f04 	addi	r5,r5,60
 4040b58:	01010134 	movhi	r4,1028
 4040b5c:	210bbd04 	addi	r4,r4,12020
 4040b60:	4040ad00 	call	4040ad0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 4040b64:	01810134 	movhi	r6,1028
 4040b68:	31809104 	addi	r6,r6,580
 4040b6c:	01410134 	movhi	r5,1028
 4040b70:	29400804 	addi	r5,r5,32
 4040b74:	01010134 	movhi	r4,1028
 4040b78:	21000804 	addi	r4,r4,32
 4040b7c:	4040ad00 	call	4040ad0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 4040b80:	01800034 	movhi	r6,0
 4040b84:	31800f04 	addi	r6,r6,60
 4040b88:	01400034 	movhi	r5,0
 4040b8c:	29400004 	addi	r5,r5,0
 4040b90:	01010134 	movhi	r4,1028
 4040b94:	210bae04 	addi	r4,r4,11960
 4040b98:	4040ad00 	call	4040ad0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 4040b9c:	4041bcc0 	call	4041bcc <alt_dcache_flush_all>
  alt_icache_flush_all();
 4040ba0:	4041de00 	call	4041de0 <alt_icache_flush_all>
}
 4040ba4:	0001883a 	nop
 4040ba8:	e037883a 	mov	sp,fp
 4040bac:	dfc00117 	ldw	ra,4(sp)
 4040bb0:	df000017 	ldw	fp,0(sp)
 4040bb4:	dec00204 	addi	sp,sp,8
 4040bb8:	f800283a 	ret

04040bbc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4040bbc:	defffd04 	addi	sp,sp,-12
 4040bc0:	dfc00215 	stw	ra,8(sp)
 4040bc4:	df000115 	stw	fp,4(sp)
 4040bc8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4040bcc:	0009883a 	mov	r4,zero
 4040bd0:	4040c6c0 	call	4040c6c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 4040bd4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4040bd8:	4040ca40 	call	4040ca4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 4040bdc:	01800034 	movhi	r6,0
 4040be0:	31800104 	addi	r6,r6,4
 4040be4:	01400034 	movhi	r5,0
 4040be8:	29400104 	addi	r5,r5,4
 4040bec:	01000034 	movhi	r4,0
 4040bf0:	21000104 	addi	r4,r4,4
 4040bf4:	40421780 	call	4042178 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 4040bf8:	4041d200 	call	4041d20 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 4040bfc:	01010134 	movhi	r4,1028
 4040c00:	21076004 	addi	r4,r4,7552
 4040c04:	40429dc0 	call	40429dc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 4040c08:	d0a01417 	ldw	r2,-32688(gp)
 4040c0c:	d0e01517 	ldw	r3,-32684(gp)
 4040c10:	d1201617 	ldw	r4,-32680(gp)
 4040c14:	200d883a 	mov	r6,r4
 4040c18:	180b883a 	mov	r5,r3
 4040c1c:	1009883a 	mov	r4,r2
 4040c20:	40407300 	call	4040730 <main>
 4040c24:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 4040c28:	01000044 	movi	r4,1
 4040c2c:	4041afc0 	call	4041afc <close>
  exit (result);
 4040c30:	e13fff17 	ldw	r4,-4(fp)
 4040c34:	40429f00 	call	40429f0 <exit>

04040c38 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 4040c38:	defffd04 	addi	sp,sp,-12
 4040c3c:	dfc00215 	stw	ra,8(sp)
 4040c40:	df000115 	stw	fp,4(sp)
 4040c44:	df000104 	addi	fp,sp,4
 4040c48:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4040c4c:	d1600304 	addi	r5,gp,-32756
 4040c50:	e13fff17 	ldw	r4,-4(fp)
 4040c54:	4041c7c0 	call	4041c7c <alt_dev_llist_insert>
}
 4040c58:	e037883a 	mov	sp,fp
 4040c5c:	dfc00117 	ldw	ra,4(sp)
 4040c60:	df000017 	ldw	fp,0(sp)
 4040c64:	dec00204 	addi	sp,sp,8
 4040c68:	f800283a 	ret

04040c6c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4040c6c:	defffd04 	addi	sp,sp,-12
 4040c70:	dfc00215 	stw	ra,8(sp)
 4040c74:	df000115 	stw	fp,4(sp)
 4040c78:	df000104 	addi	fp,sp,4
 4040c7c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, CPU);
 4040c80:	40426500 	call	4042650 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4040c84:	00800044 	movi	r2,1
 4040c88:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4040c8c:	0001883a 	nop
 4040c90:	e037883a 	mov	sp,fp
 4040c94:	dfc00117 	ldw	ra,4(sp)
 4040c98:	df000017 	ldw	fp,0(sp)
 4040c9c:	dec00204 	addi	sp,sp,8
 4040ca0:	f800283a 	ret

04040ca4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4040ca4:	defffe04 	addi	sp,sp,-8
 4040ca8:	dfc00115 	stw	ra,4(sp)
 4040cac:	df000015 	stw	fp,0(sp)
 4040cb0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 4040cb4:	01c0fa04 	movi	r7,1000
 4040cb8:	01800044 	movi	r6,1
 4040cbc:	000b883a 	mov	r5,zero
 4040cc0:	01010234 	movhi	r4,1032
 4040cc4:	21040804 	addi	r4,r4,4128
 4040cc8:	40418000 	call	4041800 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
 4040ccc:	00810234 	movhi	r2,1032
 4040cd0:	10840004 	addi	r2,r2,4096
 4040cd4:	d0a01715 	stw	r2,-32676(gp)
 4040cd8:	0080bef4 	movhi	r2,763
 4040cdc:	10bc2004 	addi	r2,r2,-3968
 4040ce0:	d0a01815 	stw	r2,-32672(gp)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 4040ce4:	01800084 	movi	r6,2
 4040ce8:	000b883a 	mov	r5,zero
 4040cec:	01000034 	movhi	r4,0
 4040cf0:	21002704 	addi	r4,r4,156
 4040cf4:	4040e840 	call	4040e84 <altera_avalon_jtag_uart_init>
 4040cf8:	01000034 	movhi	r4,0
 4040cfc:	21001d04 	addi	r4,r4,116
 4040d00:	4040c380 	call	4040c38 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 4040d04:	0001883a 	nop
}
 4040d08:	0001883a 	nop
 4040d0c:	e037883a 	mov	sp,fp
 4040d10:	dfc00117 	ldw	ra,4(sp)
 4040d14:	df000017 	ldw	fp,0(sp)
 4040d18:	dec00204 	addi	sp,sp,8
 4040d1c:	f800283a 	ret

04040d20 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4040d20:	defffa04 	addi	sp,sp,-24
 4040d24:	dfc00515 	stw	ra,20(sp)
 4040d28:	df000415 	stw	fp,16(sp)
 4040d2c:	df000404 	addi	fp,sp,16
 4040d30:	e13ffd15 	stw	r4,-12(fp)
 4040d34:	e17ffe15 	stw	r5,-8(fp)
 4040d38:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4040d3c:	e0bffd17 	ldw	r2,-12(fp)
 4040d40:	10800017 	ldw	r2,0(r2)
 4040d44:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4040d48:	e0bffc17 	ldw	r2,-16(fp)
 4040d4c:	10c00a04 	addi	r3,r2,40
 4040d50:	e0bffd17 	ldw	r2,-12(fp)
 4040d54:	10800217 	ldw	r2,8(r2)
 4040d58:	100f883a 	mov	r7,r2
 4040d5c:	e1bfff17 	ldw	r6,-4(fp)
 4040d60:	e17ffe17 	ldw	r5,-8(fp)
 4040d64:	1809883a 	mov	r4,r3
 4040d68:	40413480 	call	4041348 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 4040d6c:	e037883a 	mov	sp,fp
 4040d70:	dfc00117 	ldw	ra,4(sp)
 4040d74:	df000017 	ldw	fp,0(sp)
 4040d78:	dec00204 	addi	sp,sp,8
 4040d7c:	f800283a 	ret

04040d80 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4040d80:	defffa04 	addi	sp,sp,-24
 4040d84:	dfc00515 	stw	ra,20(sp)
 4040d88:	df000415 	stw	fp,16(sp)
 4040d8c:	df000404 	addi	fp,sp,16
 4040d90:	e13ffd15 	stw	r4,-12(fp)
 4040d94:	e17ffe15 	stw	r5,-8(fp)
 4040d98:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4040d9c:	e0bffd17 	ldw	r2,-12(fp)
 4040da0:	10800017 	ldw	r2,0(r2)
 4040da4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4040da8:	e0bffc17 	ldw	r2,-16(fp)
 4040dac:	10c00a04 	addi	r3,r2,40
 4040db0:	e0bffd17 	ldw	r2,-12(fp)
 4040db4:	10800217 	ldw	r2,8(r2)
 4040db8:	100f883a 	mov	r7,r2
 4040dbc:	e1bfff17 	ldw	r6,-4(fp)
 4040dc0:	e17ffe17 	ldw	r5,-8(fp)
 4040dc4:	1809883a 	mov	r4,r3
 4040dc8:	40415640 	call	4041564 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 4040dcc:	e037883a 	mov	sp,fp
 4040dd0:	dfc00117 	ldw	ra,4(sp)
 4040dd4:	df000017 	ldw	fp,0(sp)
 4040dd8:	dec00204 	addi	sp,sp,8
 4040ddc:	f800283a 	ret

04040de0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 4040de0:	defffc04 	addi	sp,sp,-16
 4040de4:	dfc00315 	stw	ra,12(sp)
 4040de8:	df000215 	stw	fp,8(sp)
 4040dec:	df000204 	addi	fp,sp,8
 4040df0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4040df4:	e0bfff17 	ldw	r2,-4(fp)
 4040df8:	10800017 	ldw	r2,0(r2)
 4040dfc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 4040e00:	e0bffe17 	ldw	r2,-8(fp)
 4040e04:	10c00a04 	addi	r3,r2,40
 4040e08:	e0bfff17 	ldw	r2,-4(fp)
 4040e0c:	10800217 	ldw	r2,8(r2)
 4040e10:	100b883a 	mov	r5,r2
 4040e14:	1809883a 	mov	r4,r3
 4040e18:	40411f00 	call	40411f0 <altera_avalon_jtag_uart_close>
}
 4040e1c:	e037883a 	mov	sp,fp
 4040e20:	dfc00117 	ldw	ra,4(sp)
 4040e24:	df000017 	ldw	fp,0(sp)
 4040e28:	dec00204 	addi	sp,sp,8
 4040e2c:	f800283a 	ret

04040e30 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 4040e30:	defffa04 	addi	sp,sp,-24
 4040e34:	dfc00515 	stw	ra,20(sp)
 4040e38:	df000415 	stw	fp,16(sp)
 4040e3c:	df000404 	addi	fp,sp,16
 4040e40:	e13ffd15 	stw	r4,-12(fp)
 4040e44:	e17ffe15 	stw	r5,-8(fp)
 4040e48:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 4040e4c:	e0bffd17 	ldw	r2,-12(fp)
 4040e50:	10800017 	ldw	r2,0(r2)
 4040e54:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 4040e58:	e0bffc17 	ldw	r2,-16(fp)
 4040e5c:	10800a04 	addi	r2,r2,40
 4040e60:	e1bfff17 	ldw	r6,-4(fp)
 4040e64:	e17ffe17 	ldw	r5,-8(fp)
 4040e68:	1009883a 	mov	r4,r2
 4040e6c:	40412580 	call	4041258 <altera_avalon_jtag_uart_ioctl>
}
 4040e70:	e037883a 	mov	sp,fp
 4040e74:	dfc00117 	ldw	ra,4(sp)
 4040e78:	df000017 	ldw	fp,0(sp)
 4040e7c:	dec00204 	addi	sp,sp,8
 4040e80:	f800283a 	ret

04040e84 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 4040e84:	defffa04 	addi	sp,sp,-24
 4040e88:	dfc00515 	stw	ra,20(sp)
 4040e8c:	df000415 	stw	fp,16(sp)
 4040e90:	df000404 	addi	fp,sp,16
 4040e94:	e13ffd15 	stw	r4,-12(fp)
 4040e98:	e17ffe15 	stw	r5,-8(fp)
 4040e9c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4040ea0:	e0bffd17 	ldw	r2,-12(fp)
 4040ea4:	00c00044 	movi	r3,1
 4040ea8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 4040eac:	e0bffd17 	ldw	r2,-12(fp)
 4040eb0:	10800017 	ldw	r2,0(r2)
 4040eb4:	10800104 	addi	r2,r2,4
 4040eb8:	1007883a 	mov	r3,r2
 4040ebc:	e0bffd17 	ldw	r2,-12(fp)
 4040ec0:	10800817 	ldw	r2,32(r2)
 4040ec4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 4040ec8:	e0bffe17 	ldw	r2,-8(fp)
 4040ecc:	e0ffff17 	ldw	r3,-4(fp)
 4040ed0:	d8000015 	stw	zero,0(sp)
 4040ed4:	e1fffd17 	ldw	r7,-12(fp)
 4040ed8:	01810134 	movhi	r6,1028
 4040edc:	3183d104 	addi	r6,r6,3908
 4040ee0:	180b883a 	mov	r5,r3
 4040ee4:	1009883a 	mov	r4,r2
 4040ee8:	4041e140 	call	4041e14 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 4040eec:	e0bffd17 	ldw	r2,-12(fp)
 4040ef0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 4040ef4:	e0bffd17 	ldw	r2,-12(fp)
 4040ef8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4040efc:	d0e01a17 	ldw	r3,-32664(gp)
 4040f00:	e1fffd17 	ldw	r7,-12(fp)
 4040f04:	01810134 	movhi	r6,1028
 4040f08:	31845404 	addi	r6,r6,4432
 4040f0c:	180b883a 	mov	r5,r3
 4040f10:	1009883a 	mov	r4,r2
 4040f14:	40419940 	call	4041994 <alt_alarm_start>
 4040f18:	1000040e 	bge	r2,zero,4040f2c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 4040f1c:	e0fffd17 	ldw	r3,-12(fp)
 4040f20:	00a00034 	movhi	r2,32768
 4040f24:	10bfffc4 	addi	r2,r2,-1
 4040f28:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 4040f2c:	0001883a 	nop
 4040f30:	e037883a 	mov	sp,fp
 4040f34:	dfc00117 	ldw	ra,4(sp)
 4040f38:	df000017 	ldw	fp,0(sp)
 4040f3c:	dec00204 	addi	sp,sp,8
 4040f40:	f800283a 	ret

04040f44 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 4040f44:	defff804 	addi	sp,sp,-32
 4040f48:	df000715 	stw	fp,28(sp)
 4040f4c:	df000704 	addi	fp,sp,28
 4040f50:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 4040f54:	e0bfff17 	ldw	r2,-4(fp)
 4040f58:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 4040f5c:	e0bffb17 	ldw	r2,-20(fp)
 4040f60:	10800017 	ldw	r2,0(r2)
 4040f64:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4040f68:	e0bffc17 	ldw	r2,-16(fp)
 4040f6c:	10800104 	addi	r2,r2,4
 4040f70:	10800037 	ldwio	r2,0(r2)
 4040f74:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 4040f78:	e0bffd17 	ldw	r2,-12(fp)
 4040f7c:	1080c00c 	andi	r2,r2,768
 4040f80:	10006d26 	beq	r2,zero,4041138 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 4040f84:	e0bffd17 	ldw	r2,-12(fp)
 4040f88:	1080400c 	andi	r2,r2,256
 4040f8c:	10003526 	beq	r2,zero,4041064 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 4040f90:	00800074 	movhi	r2,1
 4040f94:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4040f98:	e0bffb17 	ldw	r2,-20(fp)
 4040f9c:	10800a17 	ldw	r2,40(r2)
 4040fa0:	10800044 	addi	r2,r2,1
 4040fa4:	1081ffcc 	andi	r2,r2,2047
 4040fa8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 4040fac:	e0bffb17 	ldw	r2,-20(fp)
 4040fb0:	10c00b17 	ldw	r3,44(r2)
 4040fb4:	e0bffe17 	ldw	r2,-8(fp)
 4040fb8:	18801526 	beq	r3,r2,4041010 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 4040fbc:	e0bffc17 	ldw	r2,-16(fp)
 4040fc0:	10800037 	ldwio	r2,0(r2)
 4040fc4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 4040fc8:	e0bff917 	ldw	r2,-28(fp)
 4040fcc:	10a0000c 	andi	r2,r2,32768
 4040fd0:	10001126 	beq	r2,zero,4041018 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4040fd4:	e0bffb17 	ldw	r2,-20(fp)
 4040fd8:	10800a17 	ldw	r2,40(r2)
 4040fdc:	e0fff917 	ldw	r3,-28(fp)
 4040fe0:	1809883a 	mov	r4,r3
 4040fe4:	e0fffb17 	ldw	r3,-20(fp)
 4040fe8:	1885883a 	add	r2,r3,r2
 4040fec:	10800e04 	addi	r2,r2,56
 4040ff0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4040ff4:	e0bffb17 	ldw	r2,-20(fp)
 4040ff8:	10800a17 	ldw	r2,40(r2)
 4040ffc:	10800044 	addi	r2,r2,1
 4041000:	10c1ffcc 	andi	r3,r2,2047
 4041004:	e0bffb17 	ldw	r2,-20(fp)
 4041008:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 404100c:	003fe206 	br	4040f98 <__flash_rwdata_start+0xffffe0a4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 4041010:	0001883a 	nop
 4041014:	00000106 	br	404101c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 4041018:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 404101c:	e0bff917 	ldw	r2,-28(fp)
 4041020:	10bfffec 	andhi	r2,r2,65535
 4041024:	10000f26 	beq	r2,zero,4041064 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4041028:	e0bffb17 	ldw	r2,-20(fp)
 404102c:	10c00817 	ldw	r3,32(r2)
 4041030:	00bfff84 	movi	r2,-2
 4041034:	1886703a 	and	r3,r3,r2
 4041038:	e0bffb17 	ldw	r2,-20(fp)
 404103c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 4041040:	e0bffc17 	ldw	r2,-16(fp)
 4041044:	10800104 	addi	r2,r2,4
 4041048:	1007883a 	mov	r3,r2
 404104c:	e0bffb17 	ldw	r2,-20(fp)
 4041050:	10800817 	ldw	r2,32(r2)
 4041054:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4041058:	e0bffc17 	ldw	r2,-16(fp)
 404105c:	10800104 	addi	r2,r2,4
 4041060:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 4041064:	e0bffd17 	ldw	r2,-12(fp)
 4041068:	1080800c 	andi	r2,r2,512
 404106c:	103fbe26 	beq	r2,zero,4040f68 <__flash_rwdata_start+0xffffe074>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 4041070:	e0bffd17 	ldw	r2,-12(fp)
 4041074:	1004d43a 	srli	r2,r2,16
 4041078:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 404107c:	00001406 	br	40410d0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 4041080:	e0bffc17 	ldw	r2,-16(fp)
 4041084:	e0fffb17 	ldw	r3,-20(fp)
 4041088:	18c00d17 	ldw	r3,52(r3)
 404108c:	e13ffb17 	ldw	r4,-20(fp)
 4041090:	20c7883a 	add	r3,r4,r3
 4041094:	18c20e04 	addi	r3,r3,2104
 4041098:	18c00003 	ldbu	r3,0(r3)
 404109c:	18c03fcc 	andi	r3,r3,255
 40410a0:	18c0201c 	xori	r3,r3,128
 40410a4:	18ffe004 	addi	r3,r3,-128
 40410a8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40410ac:	e0bffb17 	ldw	r2,-20(fp)
 40410b0:	10800d17 	ldw	r2,52(r2)
 40410b4:	10800044 	addi	r2,r2,1
 40410b8:	10c1ffcc 	andi	r3,r2,2047
 40410bc:	e0bffb17 	ldw	r2,-20(fp)
 40410c0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 40410c4:	e0bffa17 	ldw	r2,-24(fp)
 40410c8:	10bfffc4 	addi	r2,r2,-1
 40410cc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 40410d0:	e0bffa17 	ldw	r2,-24(fp)
 40410d4:	10000526 	beq	r2,zero,40410ec <altera_avalon_jtag_uart_irq+0x1a8>
 40410d8:	e0bffb17 	ldw	r2,-20(fp)
 40410dc:	10c00d17 	ldw	r3,52(r2)
 40410e0:	e0bffb17 	ldw	r2,-20(fp)
 40410e4:	10800c17 	ldw	r2,48(r2)
 40410e8:	18bfe51e 	bne	r3,r2,4041080 <__flash_rwdata_start+0xffffe18c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 40410ec:	e0bffa17 	ldw	r2,-24(fp)
 40410f0:	103f9d26 	beq	r2,zero,4040f68 <__flash_rwdata_start+0xffffe074>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 40410f4:	e0bffb17 	ldw	r2,-20(fp)
 40410f8:	10c00817 	ldw	r3,32(r2)
 40410fc:	00bfff44 	movi	r2,-3
 4041100:	1886703a 	and	r3,r3,r2
 4041104:	e0bffb17 	ldw	r2,-20(fp)
 4041108:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 404110c:	e0bffb17 	ldw	r2,-20(fp)
 4041110:	10800017 	ldw	r2,0(r2)
 4041114:	10800104 	addi	r2,r2,4
 4041118:	1007883a 	mov	r3,r2
 404111c:	e0bffb17 	ldw	r2,-20(fp)
 4041120:	10800817 	ldw	r2,32(r2)
 4041124:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4041128:	e0bffc17 	ldw	r2,-16(fp)
 404112c:	10800104 	addi	r2,r2,4
 4041130:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 4041134:	003f8c06 	br	4040f68 <__flash_rwdata_start+0xffffe074>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 4041138:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 404113c:	0001883a 	nop
 4041140:	e037883a 	mov	sp,fp
 4041144:	df000017 	ldw	fp,0(sp)
 4041148:	dec00104 	addi	sp,sp,4
 404114c:	f800283a 	ret

04041150 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 4041150:	defff804 	addi	sp,sp,-32
 4041154:	df000715 	stw	fp,28(sp)
 4041158:	df000704 	addi	fp,sp,28
 404115c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 4041160:	e0bffb17 	ldw	r2,-20(fp)
 4041164:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 4041168:	e0bff917 	ldw	r2,-28(fp)
 404116c:	10800017 	ldw	r2,0(r2)
 4041170:	10800104 	addi	r2,r2,4
 4041174:	10800037 	ldwio	r2,0(r2)
 4041178:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 404117c:	e0bffa17 	ldw	r2,-24(fp)
 4041180:	1081000c 	andi	r2,r2,1024
 4041184:	10000b26 	beq	r2,zero,40411b4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 4041188:	e0bff917 	ldw	r2,-28(fp)
 404118c:	10800017 	ldw	r2,0(r2)
 4041190:	10800104 	addi	r2,r2,4
 4041194:	1007883a 	mov	r3,r2
 4041198:	e0bff917 	ldw	r2,-28(fp)
 404119c:	10800817 	ldw	r2,32(r2)
 40411a0:	10810014 	ori	r2,r2,1024
 40411a4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 40411a8:	e0bff917 	ldw	r2,-28(fp)
 40411ac:	10000915 	stw	zero,36(r2)
 40411b0:	00000a06 	br	40411dc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 40411b4:	e0bff917 	ldw	r2,-28(fp)
 40411b8:	10c00917 	ldw	r3,36(r2)
 40411bc:	00a00034 	movhi	r2,32768
 40411c0:	10bfff04 	addi	r2,r2,-4
 40411c4:	10c00536 	bltu	r2,r3,40411dc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 40411c8:	e0bff917 	ldw	r2,-28(fp)
 40411cc:	10800917 	ldw	r2,36(r2)
 40411d0:	10c00044 	addi	r3,r2,1
 40411d4:	e0bff917 	ldw	r2,-28(fp)
 40411d8:	10c00915 	stw	r3,36(r2)
 40411dc:	d0a01a17 	ldw	r2,-32664(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 40411e0:	e037883a 	mov	sp,fp
 40411e4:	df000017 	ldw	fp,0(sp)
 40411e8:	dec00104 	addi	sp,sp,4
 40411ec:	f800283a 	ret

040411f0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 40411f0:	defffd04 	addi	sp,sp,-12
 40411f4:	df000215 	stw	fp,8(sp)
 40411f8:	df000204 	addi	fp,sp,8
 40411fc:	e13ffe15 	stw	r4,-8(fp)
 4041200:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4041204:	00000506 	br	404121c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 4041208:	e0bfff17 	ldw	r2,-4(fp)
 404120c:	1090000c 	andi	r2,r2,16384
 4041210:	10000226 	beq	r2,zero,404121c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 4041214:	00bffd44 	movi	r2,-11
 4041218:	00000b06 	br	4041248 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 404121c:	e0bffe17 	ldw	r2,-8(fp)
 4041220:	10c00d17 	ldw	r3,52(r2)
 4041224:	e0bffe17 	ldw	r2,-8(fp)
 4041228:	10800c17 	ldw	r2,48(r2)
 404122c:	18800526 	beq	r3,r2,4041244 <altera_avalon_jtag_uart_close+0x54>
 4041230:	e0bffe17 	ldw	r2,-8(fp)
 4041234:	10c00917 	ldw	r3,36(r2)
 4041238:	e0bffe17 	ldw	r2,-8(fp)
 404123c:	10800117 	ldw	r2,4(r2)
 4041240:	18bff136 	bltu	r3,r2,4041208 <__flash_rwdata_start+0xffffe314>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 4041244:	0005883a 	mov	r2,zero
}
 4041248:	e037883a 	mov	sp,fp
 404124c:	df000017 	ldw	fp,0(sp)
 4041250:	dec00104 	addi	sp,sp,4
 4041254:	f800283a 	ret

04041258 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 4041258:	defffa04 	addi	sp,sp,-24
 404125c:	df000515 	stw	fp,20(sp)
 4041260:	df000504 	addi	fp,sp,20
 4041264:	e13ffd15 	stw	r4,-12(fp)
 4041268:	e17ffe15 	stw	r5,-8(fp)
 404126c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 4041270:	00bff9c4 	movi	r2,-25
 4041274:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 4041278:	e0bffe17 	ldw	r2,-8(fp)
 404127c:	10da8060 	cmpeqi	r3,r2,27137
 4041280:	1800031e 	bne	r3,zero,4041290 <altera_avalon_jtag_uart_ioctl+0x38>
 4041284:	109a80a0 	cmpeqi	r2,r2,27138
 4041288:	1000181e 	bne	r2,zero,40412ec <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 404128c:	00002906 	br	4041334 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 4041290:	e0bffd17 	ldw	r2,-12(fp)
 4041294:	10c00117 	ldw	r3,4(r2)
 4041298:	00a00034 	movhi	r2,32768
 404129c:	10bfffc4 	addi	r2,r2,-1
 40412a0:	18802126 	beq	r3,r2,4041328 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 40412a4:	e0bfff17 	ldw	r2,-4(fp)
 40412a8:	10800017 	ldw	r2,0(r2)
 40412ac:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 40412b0:	e0bffc17 	ldw	r2,-16(fp)
 40412b4:	10800090 	cmplti	r2,r2,2
 40412b8:	1000061e 	bne	r2,zero,40412d4 <altera_avalon_jtag_uart_ioctl+0x7c>
 40412bc:	e0fffc17 	ldw	r3,-16(fp)
 40412c0:	00a00034 	movhi	r2,32768
 40412c4:	10bfffc4 	addi	r2,r2,-1
 40412c8:	18800226 	beq	r3,r2,40412d4 <altera_avalon_jtag_uart_ioctl+0x7c>
 40412cc:	e0bffc17 	ldw	r2,-16(fp)
 40412d0:	00000206 	br	40412dc <altera_avalon_jtag_uart_ioctl+0x84>
 40412d4:	00a00034 	movhi	r2,32768
 40412d8:	10bfff84 	addi	r2,r2,-2
 40412dc:	e0fffd17 	ldw	r3,-12(fp)
 40412e0:	18800115 	stw	r2,4(r3)
      rc = 0;
 40412e4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 40412e8:	00000f06 	br	4041328 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 40412ec:	e0bffd17 	ldw	r2,-12(fp)
 40412f0:	10c00117 	ldw	r3,4(r2)
 40412f4:	00a00034 	movhi	r2,32768
 40412f8:	10bfffc4 	addi	r2,r2,-1
 40412fc:	18800c26 	beq	r3,r2,4041330 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 4041300:	e0bffd17 	ldw	r2,-12(fp)
 4041304:	10c00917 	ldw	r3,36(r2)
 4041308:	e0bffd17 	ldw	r2,-12(fp)
 404130c:	10800117 	ldw	r2,4(r2)
 4041310:	1885803a 	cmpltu	r2,r3,r2
 4041314:	10c03fcc 	andi	r3,r2,255
 4041318:	e0bfff17 	ldw	r2,-4(fp)
 404131c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 4041320:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4041324:	00000206 	br	4041330 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 4041328:	0001883a 	nop
 404132c:	00000106 	br	4041334 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 4041330:	0001883a 	nop

  default:
    break;
  }

  return rc;
 4041334:	e0bffb17 	ldw	r2,-20(fp)
}
 4041338:	e037883a 	mov	sp,fp
 404133c:	df000017 	ldw	fp,0(sp)
 4041340:	dec00104 	addi	sp,sp,4
 4041344:	f800283a 	ret

04041348 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 4041348:	defff304 	addi	sp,sp,-52
 404134c:	dfc00c15 	stw	ra,48(sp)
 4041350:	df000b15 	stw	fp,44(sp)
 4041354:	df000b04 	addi	fp,sp,44
 4041358:	e13ffc15 	stw	r4,-16(fp)
 404135c:	e17ffd15 	stw	r5,-12(fp)
 4041360:	e1bffe15 	stw	r6,-8(fp)
 4041364:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 4041368:	e0bffd17 	ldw	r2,-12(fp)
 404136c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4041370:	00004706 	br	4041490 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 4041374:	e0bffc17 	ldw	r2,-16(fp)
 4041378:	10800a17 	ldw	r2,40(r2)
 404137c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 4041380:	e0bffc17 	ldw	r2,-16(fp)
 4041384:	10800b17 	ldw	r2,44(r2)
 4041388:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 404138c:	e0fff717 	ldw	r3,-36(fp)
 4041390:	e0bff817 	ldw	r2,-32(fp)
 4041394:	18800536 	bltu	r3,r2,40413ac <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 4041398:	e0fff717 	ldw	r3,-36(fp)
 404139c:	e0bff817 	ldw	r2,-32(fp)
 40413a0:	1885c83a 	sub	r2,r3,r2
 40413a4:	e0bff615 	stw	r2,-40(fp)
 40413a8:	00000406 	br	40413bc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 40413ac:	00c20004 	movi	r3,2048
 40413b0:	e0bff817 	ldw	r2,-32(fp)
 40413b4:	1885c83a 	sub	r2,r3,r2
 40413b8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 40413bc:	e0bff617 	ldw	r2,-40(fp)
 40413c0:	10001e26 	beq	r2,zero,404143c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 40413c4:	e0fffe17 	ldw	r3,-8(fp)
 40413c8:	e0bff617 	ldw	r2,-40(fp)
 40413cc:	1880022e 	bgeu	r3,r2,40413d8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 40413d0:	e0bffe17 	ldw	r2,-8(fp)
 40413d4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 40413d8:	e0bffc17 	ldw	r2,-16(fp)
 40413dc:	10c00e04 	addi	r3,r2,56
 40413e0:	e0bff817 	ldw	r2,-32(fp)
 40413e4:	1885883a 	add	r2,r3,r2
 40413e8:	e1bff617 	ldw	r6,-40(fp)
 40413ec:	100b883a 	mov	r5,r2
 40413f0:	e13ff517 	ldw	r4,-44(fp)
 40413f4:	4042aa40 	call	4042aa4 <memcpy>
      ptr   += n;
 40413f8:	e0fff517 	ldw	r3,-44(fp)
 40413fc:	e0bff617 	ldw	r2,-40(fp)
 4041400:	1885883a 	add	r2,r3,r2
 4041404:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 4041408:	e0fffe17 	ldw	r3,-8(fp)
 404140c:	e0bff617 	ldw	r2,-40(fp)
 4041410:	1885c83a 	sub	r2,r3,r2
 4041414:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4041418:	e0fff817 	ldw	r3,-32(fp)
 404141c:	e0bff617 	ldw	r2,-40(fp)
 4041420:	1885883a 	add	r2,r3,r2
 4041424:	10c1ffcc 	andi	r3,r2,2047
 4041428:	e0bffc17 	ldw	r2,-16(fp)
 404142c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 4041430:	e0bffe17 	ldw	r2,-8(fp)
 4041434:	00bfcf16 	blt	zero,r2,4041374 <__flash_rwdata_start+0xffffe480>
 4041438:	00000106 	br	4041440 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 404143c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 4041440:	e0fff517 	ldw	r3,-44(fp)
 4041444:	e0bffd17 	ldw	r2,-12(fp)
 4041448:	1880141e 	bne	r3,r2,404149c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 404144c:	e0bfff17 	ldw	r2,-4(fp)
 4041450:	1090000c 	andi	r2,r2,16384
 4041454:	1000131e 	bne	r2,zero,40414a4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 4041458:	0001883a 	nop
 404145c:	e0bffc17 	ldw	r2,-16(fp)
 4041460:	10c00a17 	ldw	r3,40(r2)
 4041464:	e0bff717 	ldw	r2,-36(fp)
 4041468:	1880051e 	bne	r3,r2,4041480 <altera_avalon_jtag_uart_read+0x138>
 404146c:	e0bffc17 	ldw	r2,-16(fp)
 4041470:	10c00917 	ldw	r3,36(r2)
 4041474:	e0bffc17 	ldw	r2,-16(fp)
 4041478:	10800117 	ldw	r2,4(r2)
 404147c:	18bff736 	bltu	r3,r2,404145c <__flash_rwdata_start+0xffffe568>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 4041480:	e0bffc17 	ldw	r2,-16(fp)
 4041484:	10c00a17 	ldw	r3,40(r2)
 4041488:	e0bff717 	ldw	r2,-36(fp)
 404148c:	18800726 	beq	r3,r2,40414ac <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4041490:	e0bffe17 	ldw	r2,-8(fp)
 4041494:	00bfb716 	blt	zero,r2,4041374 <__flash_rwdata_start+0xffffe480>
 4041498:	00000506 	br	40414b0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 404149c:	0001883a 	nop
 40414a0:	00000306 	br	40414b0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 40414a4:	0001883a 	nop
 40414a8:	00000106 	br	40414b0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 40414ac:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 40414b0:	e0fff517 	ldw	r3,-44(fp)
 40414b4:	e0bffd17 	ldw	r2,-12(fp)
 40414b8:	18801826 	beq	r3,r2,404151c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40414bc:	0005303a 	rdctl	r2,status
 40414c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40414c4:	e0fffb17 	ldw	r3,-20(fp)
 40414c8:	00bfff84 	movi	r2,-2
 40414cc:	1884703a 	and	r2,r3,r2
 40414d0:	1001703a 	wrctl	status,r2
  
  return context;
 40414d4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 40414d8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 40414dc:	e0bffc17 	ldw	r2,-16(fp)
 40414e0:	10800817 	ldw	r2,32(r2)
 40414e4:	10c00054 	ori	r3,r2,1
 40414e8:	e0bffc17 	ldw	r2,-16(fp)
 40414ec:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 40414f0:	e0bffc17 	ldw	r2,-16(fp)
 40414f4:	10800017 	ldw	r2,0(r2)
 40414f8:	10800104 	addi	r2,r2,4
 40414fc:	1007883a 	mov	r3,r2
 4041500:	e0bffc17 	ldw	r2,-16(fp)
 4041504:	10800817 	ldw	r2,32(r2)
 4041508:	18800035 	stwio	r2,0(r3)
 404150c:	e0bffa17 	ldw	r2,-24(fp)
 4041510:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4041514:	e0bff917 	ldw	r2,-28(fp)
 4041518:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 404151c:	e0fff517 	ldw	r3,-44(fp)
 4041520:	e0bffd17 	ldw	r2,-12(fp)
 4041524:	18800426 	beq	r3,r2,4041538 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 4041528:	e0fff517 	ldw	r3,-44(fp)
 404152c:	e0bffd17 	ldw	r2,-12(fp)
 4041530:	1885c83a 	sub	r2,r3,r2
 4041534:	00000606 	br	4041550 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 4041538:	e0bfff17 	ldw	r2,-4(fp)
 404153c:	1090000c 	andi	r2,r2,16384
 4041540:	10000226 	beq	r2,zero,404154c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 4041544:	00bffd44 	movi	r2,-11
 4041548:	00000106 	br	4041550 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 404154c:	00bffec4 	movi	r2,-5
}
 4041550:	e037883a 	mov	sp,fp
 4041554:	dfc00117 	ldw	ra,4(sp)
 4041558:	df000017 	ldw	fp,0(sp)
 404155c:	dec00204 	addi	sp,sp,8
 4041560:	f800283a 	ret

04041564 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4041564:	defff304 	addi	sp,sp,-52
 4041568:	dfc00c15 	stw	ra,48(sp)
 404156c:	df000b15 	stw	fp,44(sp)
 4041570:	df000b04 	addi	fp,sp,44
 4041574:	e13ffc15 	stw	r4,-16(fp)
 4041578:	e17ffd15 	stw	r5,-12(fp)
 404157c:	e1bffe15 	stw	r6,-8(fp)
 4041580:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 4041584:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 4041588:	e0bffd17 	ldw	r2,-12(fp)
 404158c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4041590:	00003706 	br	4041670 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 4041594:	e0bffc17 	ldw	r2,-16(fp)
 4041598:	10800c17 	ldw	r2,48(r2)
 404159c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 40415a0:	e0bffc17 	ldw	r2,-16(fp)
 40415a4:	10800d17 	ldw	r2,52(r2)
 40415a8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 40415ac:	e0fff917 	ldw	r3,-28(fp)
 40415b0:	e0bff517 	ldw	r2,-44(fp)
 40415b4:	1880062e 	bgeu	r3,r2,40415d0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 40415b8:	e0fff517 	ldw	r3,-44(fp)
 40415bc:	e0bff917 	ldw	r2,-28(fp)
 40415c0:	1885c83a 	sub	r2,r3,r2
 40415c4:	10bfffc4 	addi	r2,r2,-1
 40415c8:	e0bff615 	stw	r2,-40(fp)
 40415cc:	00000b06 	br	40415fc <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 40415d0:	e0bff517 	ldw	r2,-44(fp)
 40415d4:	10000526 	beq	r2,zero,40415ec <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 40415d8:	00c20004 	movi	r3,2048
 40415dc:	e0bff917 	ldw	r2,-28(fp)
 40415e0:	1885c83a 	sub	r2,r3,r2
 40415e4:	e0bff615 	stw	r2,-40(fp)
 40415e8:	00000406 	br	40415fc <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 40415ec:	00c1ffc4 	movi	r3,2047
 40415f0:	e0bff917 	ldw	r2,-28(fp)
 40415f4:	1885c83a 	sub	r2,r3,r2
 40415f8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 40415fc:	e0bff617 	ldw	r2,-40(fp)
 4041600:	10001e26 	beq	r2,zero,404167c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 4041604:	e0fffe17 	ldw	r3,-8(fp)
 4041608:	e0bff617 	ldw	r2,-40(fp)
 404160c:	1880022e 	bgeu	r3,r2,4041618 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 4041610:	e0bffe17 	ldw	r2,-8(fp)
 4041614:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 4041618:	e0bffc17 	ldw	r2,-16(fp)
 404161c:	10c20e04 	addi	r3,r2,2104
 4041620:	e0bff917 	ldw	r2,-28(fp)
 4041624:	1885883a 	add	r2,r3,r2
 4041628:	e1bff617 	ldw	r6,-40(fp)
 404162c:	e17ffd17 	ldw	r5,-12(fp)
 4041630:	1009883a 	mov	r4,r2
 4041634:	4042aa40 	call	4042aa4 <memcpy>
      ptr   += n;
 4041638:	e0fffd17 	ldw	r3,-12(fp)
 404163c:	e0bff617 	ldw	r2,-40(fp)
 4041640:	1885883a 	add	r2,r3,r2
 4041644:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 4041648:	e0fffe17 	ldw	r3,-8(fp)
 404164c:	e0bff617 	ldw	r2,-40(fp)
 4041650:	1885c83a 	sub	r2,r3,r2
 4041654:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4041658:	e0fff917 	ldw	r3,-28(fp)
 404165c:	e0bff617 	ldw	r2,-40(fp)
 4041660:	1885883a 	add	r2,r3,r2
 4041664:	10c1ffcc 	andi	r3,r2,2047
 4041668:	e0bffc17 	ldw	r2,-16(fp)
 404166c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4041670:	e0bffe17 	ldw	r2,-8(fp)
 4041674:	00bfc716 	blt	zero,r2,4041594 <__flash_rwdata_start+0xffffe6a0>
 4041678:	00000106 	br	4041680 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 404167c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4041680:	0005303a 	rdctl	r2,status
 4041684:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4041688:	e0fffb17 	ldw	r3,-20(fp)
 404168c:	00bfff84 	movi	r2,-2
 4041690:	1884703a 	and	r2,r3,r2
 4041694:	1001703a 	wrctl	status,r2
  
  return context;
 4041698:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 404169c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 40416a0:	e0bffc17 	ldw	r2,-16(fp)
 40416a4:	10800817 	ldw	r2,32(r2)
 40416a8:	10c00094 	ori	r3,r2,2
 40416ac:	e0bffc17 	ldw	r2,-16(fp)
 40416b0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 40416b4:	e0bffc17 	ldw	r2,-16(fp)
 40416b8:	10800017 	ldw	r2,0(r2)
 40416bc:	10800104 	addi	r2,r2,4
 40416c0:	1007883a 	mov	r3,r2
 40416c4:	e0bffc17 	ldw	r2,-16(fp)
 40416c8:	10800817 	ldw	r2,32(r2)
 40416cc:	18800035 	stwio	r2,0(r3)
 40416d0:	e0bffa17 	ldw	r2,-24(fp)
 40416d4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40416d8:	e0bff817 	ldw	r2,-32(fp)
 40416dc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 40416e0:	e0bffe17 	ldw	r2,-8(fp)
 40416e4:	0080100e 	bge	zero,r2,4041728 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 40416e8:	e0bfff17 	ldw	r2,-4(fp)
 40416ec:	1090000c 	andi	r2,r2,16384
 40416f0:	1000101e 	bne	r2,zero,4041734 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 40416f4:	0001883a 	nop
 40416f8:	e0bffc17 	ldw	r2,-16(fp)
 40416fc:	10c00d17 	ldw	r3,52(r2)
 4041700:	e0bff517 	ldw	r2,-44(fp)
 4041704:	1880051e 	bne	r3,r2,404171c <altera_avalon_jtag_uart_write+0x1b8>
 4041708:	e0bffc17 	ldw	r2,-16(fp)
 404170c:	10c00917 	ldw	r3,36(r2)
 4041710:	e0bffc17 	ldw	r2,-16(fp)
 4041714:	10800117 	ldw	r2,4(r2)
 4041718:	18bff736 	bltu	r3,r2,40416f8 <__flash_rwdata_start+0xffffe804>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 404171c:	e0bffc17 	ldw	r2,-16(fp)
 4041720:	10800917 	ldw	r2,36(r2)
 4041724:	1000051e 	bne	r2,zero,404173c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 4041728:	e0bffe17 	ldw	r2,-8(fp)
 404172c:	00bfd016 	blt	zero,r2,4041670 <__flash_rwdata_start+0xffffe77c>
 4041730:	00000306 	br	4041740 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 4041734:	0001883a 	nop
 4041738:	00000106 	br	4041740 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 404173c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 4041740:	e0fffd17 	ldw	r3,-12(fp)
 4041744:	e0bff717 	ldw	r2,-36(fp)
 4041748:	18800426 	beq	r3,r2,404175c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 404174c:	e0fffd17 	ldw	r3,-12(fp)
 4041750:	e0bff717 	ldw	r2,-36(fp)
 4041754:	1885c83a 	sub	r2,r3,r2
 4041758:	00000606 	br	4041774 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 404175c:	e0bfff17 	ldw	r2,-4(fp)
 4041760:	1090000c 	andi	r2,r2,16384
 4041764:	10000226 	beq	r2,zero,4041770 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 4041768:	00bffd44 	movi	r2,-11
 404176c:	00000106 	br	4041774 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 4041770:	00bffec4 	movi	r2,-5
}
 4041774:	e037883a 	mov	sp,fp
 4041778:	dfc00117 	ldw	ra,4(sp)
 404177c:	df000017 	ldw	fp,0(sp)
 4041780:	dec00204 	addi	sp,sp,8
 4041784:	f800283a 	ret

04041788 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 4041788:	defffa04 	addi	sp,sp,-24
 404178c:	dfc00515 	stw	ra,20(sp)
 4041790:	df000415 	stw	fp,16(sp)
 4041794:	df000404 	addi	fp,sp,16
 4041798:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 404179c:	0007883a 	mov	r3,zero
 40417a0:	e0bfff17 	ldw	r2,-4(fp)
 40417a4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 40417a8:	e0bfff17 	ldw	r2,-4(fp)
 40417ac:	10800104 	addi	r2,r2,4
 40417b0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40417b4:	0005303a 	rdctl	r2,status
 40417b8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40417bc:	e0fffd17 	ldw	r3,-12(fp)
 40417c0:	00bfff84 	movi	r2,-2
 40417c4:	1884703a 	and	r2,r3,r2
 40417c8:	1001703a 	wrctl	status,r2
  
  return context;
 40417cc:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 40417d0:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 40417d4:	40425480 	call	4042548 <alt_tick>
 40417d8:	e0bffc17 	ldw	r2,-16(fp)
 40417dc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40417e0:	e0bffe17 	ldw	r2,-8(fp)
 40417e4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 40417e8:	0001883a 	nop
 40417ec:	e037883a 	mov	sp,fp
 40417f0:	dfc00117 	ldw	ra,4(sp)
 40417f4:	df000017 	ldw	fp,0(sp)
 40417f8:	dec00204 	addi	sp,sp,8
 40417fc:	f800283a 	ret

04041800 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 4041800:	defff804 	addi	sp,sp,-32
 4041804:	dfc00715 	stw	ra,28(sp)
 4041808:	df000615 	stw	fp,24(sp)
 404180c:	df000604 	addi	fp,sp,24
 4041810:	e13ffc15 	stw	r4,-16(fp)
 4041814:	e17ffd15 	stw	r5,-12(fp)
 4041818:	e1bffe15 	stw	r6,-8(fp)
 404181c:	e1ffff15 	stw	r7,-4(fp)
 4041820:	e0bfff17 	ldw	r2,-4(fp)
 4041824:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 4041828:	d0a01a17 	ldw	r2,-32664(gp)
 404182c:	1000021e 	bne	r2,zero,4041838 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 4041830:	e0bffb17 	ldw	r2,-20(fp)
 4041834:	d0a01a15 	stw	r2,-32664(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 4041838:	e0bffc17 	ldw	r2,-16(fp)
 404183c:	10800104 	addi	r2,r2,4
 4041840:	00c001c4 	movi	r3,7
 4041844:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 4041848:	d8000015 	stw	zero,0(sp)
 404184c:	e1fffc17 	ldw	r7,-16(fp)
 4041850:	01810134 	movhi	r6,1028
 4041854:	3185e204 	addi	r6,r6,6024
 4041858:	e17ffe17 	ldw	r5,-8(fp)
 404185c:	e13ffd17 	ldw	r4,-12(fp)
 4041860:	4041e140 	call	4041e14 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 4041864:	0001883a 	nop
 4041868:	e037883a 	mov	sp,fp
 404186c:	dfc00117 	ldw	ra,4(sp)
 4041870:	df000017 	ldw	fp,0(sp)
 4041874:	dec00204 	addi	sp,sp,8
 4041878:	f800283a 	ret

0404187c <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
 404187c:	defffe04 	addi	sp,sp,-8
 4041880:	df000115 	stw	fp,4(sp)
 4041884:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
 4041888:	d0a01717 	ldw	r2,-32676(gp)
 404188c:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
 4041890:	d0a01817 	ldw	r2,-32672(gp)
 4041894:	1000021e 	bne	r2,zero,40418a0 <alt_timestamp_start+0x24>
  {
    return -1;
 4041898:	00bfffc4 	movi	r2,-1
 404189c:	00001106 	br	40418e4 <alt_timestamp_start+0x68>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
 40418a0:	e0bfff17 	ldw	r2,-4(fp)
 40418a4:	10800104 	addi	r2,r2,4
 40418a8:	00c00204 	movi	r3,8
 40418ac:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
 40418b0:	e0bfff17 	ldw	r2,-4(fp)
 40418b4:	10800204 	addi	r2,r2,8
 40418b8:	00ffffd4 	movui	r3,65535
 40418bc:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
 40418c0:	e0bfff17 	ldw	r2,-4(fp)
 40418c4:	10800304 	addi	r2,r2,12
 40418c8:	00ffffd4 	movui	r3,65535
 40418cc:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
 40418d0:	e0bfff17 	ldw	r2,-4(fp)
 40418d4:	10800104 	addi	r2,r2,4
 40418d8:	00c00104 	movi	r3,4
 40418dc:	10c00035 	stwio	r3,0(r2)
    } 
  }
  return 0;
 40418e0:	0005883a 	mov	r2,zero
}
 40418e4:	e037883a 	mov	sp,fp
 40418e8:	df000017 	ldw	fp,0(sp)
 40418ec:	dec00104 	addi	sp,sp,4
 40418f0:	f800283a 	ret

040418f4 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
 40418f4:	defffc04 	addi	sp,sp,-16
 40418f8:	df000315 	stw	fp,12(sp)
 40418fc:	df000304 	addi	fp,sp,12

  void* base = altera_avalon_timer_ts_base;
 4041900:	d0a01717 	ldw	r2,-32676(gp)
 4041904:	e0bffd15 	stw	r2,-12(fp)

  if (!altera_avalon_timer_ts_freq)
 4041908:	d0a01817 	ldw	r2,-32672(gp)
 404190c:	1000021e 	bne	r2,zero,4041918 <alt_timestamp+0x24>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
#else
        return 0xFFFFFFFF;
 4041910:	00bfffc4 	movi	r2,-1
 4041914:	00001306 	br	4041964 <alt_timestamp+0x70>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
 4041918:	e0bffd17 	ldw	r2,-12(fp)
 404191c:	10800404 	addi	r2,r2,16
 4041920:	0007883a 	mov	r3,zero
 4041924:	10c00035 	stwio	r3,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
 4041928:	e0bffd17 	ldw	r2,-12(fp)
 404192c:	10800404 	addi	r2,r2,16
 4041930:	10800037 	ldwio	r2,0(r2)
 4041934:	10bfffcc 	andi	r2,r2,65535
 4041938:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
 404193c:	e0bffd17 	ldw	r2,-12(fp)
 4041940:	10800504 	addi	r2,r2,20
 4041944:	10800037 	ldwio	r2,0(r2)
 4041948:	10bfffcc 	andi	r2,r2,65535
 404194c:	e0bfff15 	stw	r2,-4(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
 4041950:	e0bfff17 	ldw	r2,-4(fp)
 4041954:	1006943a 	slli	r3,r2,16
 4041958:	e0bffe17 	ldw	r2,-8(fp)
 404195c:	1884b03a 	or	r2,r3,r2
 4041960:	0084303a 	nor	r2,zero,r2
#endif
  }
}
 4041964:	e037883a 	mov	sp,fp
 4041968:	df000017 	ldw	fp,0(sp)
 404196c:	dec00104 	addi	sp,sp,4
 4041970:	f800283a 	ret

04041974 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
 4041974:	deffff04 	addi	sp,sp,-4
 4041978:	df000015 	stw	fp,0(sp)
 404197c:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
 4041980:	d0a01817 	ldw	r2,-32672(gp)
}
 4041984:	e037883a 	mov	sp,fp
 4041988:	df000017 	ldw	fp,0(sp)
 404198c:	dec00104 	addi	sp,sp,4
 4041990:	f800283a 	ret

04041994 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 4041994:	defff504 	addi	sp,sp,-44
 4041998:	df000a15 	stw	fp,40(sp)
 404199c:	df000a04 	addi	fp,sp,40
 40419a0:	e13ffc15 	stw	r4,-16(fp)
 40419a4:	e17ffd15 	stw	r5,-12(fp)
 40419a8:	e1bffe15 	stw	r6,-8(fp)
 40419ac:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 40419b0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 40419b4:	d0a01a17 	ldw	r2,-32664(gp)
  
  if (alt_ticks_per_second ())
 40419b8:	10003c26 	beq	r2,zero,4041aac <alt_alarm_start+0x118>
  {
    if (alarm)
 40419bc:	e0bffc17 	ldw	r2,-16(fp)
 40419c0:	10003826 	beq	r2,zero,4041aa4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 40419c4:	e0bffc17 	ldw	r2,-16(fp)
 40419c8:	e0fffe17 	ldw	r3,-8(fp)
 40419cc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 40419d0:	e0bffc17 	ldw	r2,-16(fp)
 40419d4:	e0ffff17 	ldw	r3,-4(fp)
 40419d8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40419dc:	0005303a 	rdctl	r2,status
 40419e0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40419e4:	e0fff917 	ldw	r3,-28(fp)
 40419e8:	00bfff84 	movi	r2,-2
 40419ec:	1884703a 	and	r2,r3,r2
 40419f0:	1001703a 	wrctl	status,r2
  
  return context;
 40419f4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 40419f8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 40419fc:	d0a01b17 	ldw	r2,-32660(gp)
      
      current_nticks = alt_nticks();
 4041a00:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 4041a04:	e0fffd17 	ldw	r3,-12(fp)
 4041a08:	e0bff617 	ldw	r2,-40(fp)
 4041a0c:	1885883a 	add	r2,r3,r2
 4041a10:	10c00044 	addi	r3,r2,1
 4041a14:	e0bffc17 	ldw	r2,-16(fp)
 4041a18:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 4041a1c:	e0bffc17 	ldw	r2,-16(fp)
 4041a20:	10c00217 	ldw	r3,8(r2)
 4041a24:	e0bff617 	ldw	r2,-40(fp)
 4041a28:	1880042e 	bgeu	r3,r2,4041a3c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 4041a2c:	e0bffc17 	ldw	r2,-16(fp)
 4041a30:	00c00044 	movi	r3,1
 4041a34:	10c00405 	stb	r3,16(r2)
 4041a38:	00000206 	br	4041a44 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 4041a3c:	e0bffc17 	ldw	r2,-16(fp)
 4041a40:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 4041a44:	e0bffc17 	ldw	r2,-16(fp)
 4041a48:	d0e00804 	addi	r3,gp,-32736
 4041a4c:	e0fffa15 	stw	r3,-24(fp)
 4041a50:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4041a54:	e0bffb17 	ldw	r2,-20(fp)
 4041a58:	e0fffa17 	ldw	r3,-24(fp)
 4041a5c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4041a60:	e0bffa17 	ldw	r2,-24(fp)
 4041a64:	10c00017 	ldw	r3,0(r2)
 4041a68:	e0bffb17 	ldw	r2,-20(fp)
 4041a6c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4041a70:	e0bffa17 	ldw	r2,-24(fp)
 4041a74:	10800017 	ldw	r2,0(r2)
 4041a78:	e0fffb17 	ldw	r3,-20(fp)
 4041a7c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4041a80:	e0bffa17 	ldw	r2,-24(fp)
 4041a84:	e0fffb17 	ldw	r3,-20(fp)
 4041a88:	10c00015 	stw	r3,0(r2)
 4041a8c:	e0bff817 	ldw	r2,-32(fp)
 4041a90:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4041a94:	e0bff717 	ldw	r2,-36(fp)
 4041a98:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 4041a9c:	0005883a 	mov	r2,zero
 4041aa0:	00000306 	br	4041ab0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 4041aa4:	00bffa84 	movi	r2,-22
 4041aa8:	00000106 	br	4041ab0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 4041aac:	00bfde84 	movi	r2,-134
  }
}
 4041ab0:	e037883a 	mov	sp,fp
 4041ab4:	df000017 	ldw	fp,0(sp)
 4041ab8:	dec00104 	addi	sp,sp,4
 4041abc:	f800283a 	ret

04041ac0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4041ac0:	defffe04 	addi	sp,sp,-8
 4041ac4:	dfc00115 	stw	ra,4(sp)
 4041ac8:	df000015 	stw	fp,0(sp)
 4041acc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4041ad0:	d0a00617 	ldw	r2,-32744(gp)
 4041ad4:	10000326 	beq	r2,zero,4041ae4 <alt_get_errno+0x24>
 4041ad8:	d0a00617 	ldw	r2,-32744(gp)
 4041adc:	103ee83a 	callr	r2
 4041ae0:	00000106 	br	4041ae8 <alt_get_errno+0x28>
 4041ae4:	d0a01d04 	addi	r2,gp,-32652
}
 4041ae8:	e037883a 	mov	sp,fp
 4041aec:	dfc00117 	ldw	ra,4(sp)
 4041af0:	df000017 	ldw	fp,0(sp)
 4041af4:	dec00204 	addi	sp,sp,8
 4041af8:	f800283a 	ret

04041afc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4041afc:	defffb04 	addi	sp,sp,-20
 4041b00:	dfc00415 	stw	ra,16(sp)
 4041b04:	df000315 	stw	fp,12(sp)
 4041b08:	df000304 	addi	fp,sp,12
 4041b0c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4041b10:	e0bfff17 	ldw	r2,-4(fp)
 4041b14:	10000616 	blt	r2,zero,4041b30 <close+0x34>
 4041b18:	e0bfff17 	ldw	r2,-4(fp)
 4041b1c:	10c00324 	muli	r3,r2,12
 4041b20:	00800034 	movhi	r2,0
 4041b24:	10843f04 	addi	r2,r2,4348
 4041b28:	1885883a 	add	r2,r3,r2
 4041b2c:	00000106 	br	4041b34 <close+0x38>
 4041b30:	0005883a 	mov	r2,zero
 4041b34:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 4041b38:	e0bffd17 	ldw	r2,-12(fp)
 4041b3c:	10001926 	beq	r2,zero,4041ba4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4041b40:	e0bffd17 	ldw	r2,-12(fp)
 4041b44:	10800017 	ldw	r2,0(r2)
 4041b48:	10800417 	ldw	r2,16(r2)
 4041b4c:	10000626 	beq	r2,zero,4041b68 <close+0x6c>
 4041b50:	e0bffd17 	ldw	r2,-12(fp)
 4041b54:	10800017 	ldw	r2,0(r2)
 4041b58:	10800417 	ldw	r2,16(r2)
 4041b5c:	e13ffd17 	ldw	r4,-12(fp)
 4041b60:	103ee83a 	callr	r2
 4041b64:	00000106 	br	4041b6c <close+0x70>
 4041b68:	0005883a 	mov	r2,zero
 4041b6c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4041b70:	e13fff17 	ldw	r4,-4(fp)
 4041b74:	40424480 	call	4042448 <alt_release_fd>
    if (rval < 0)
 4041b78:	e0bffe17 	ldw	r2,-8(fp)
 4041b7c:	1000070e 	bge	r2,zero,4041b9c <close+0xa0>
    {
      ALT_ERRNO = -rval;
 4041b80:	4041ac00 	call	4041ac0 <alt_get_errno>
 4041b84:	1007883a 	mov	r3,r2
 4041b88:	e0bffe17 	ldw	r2,-8(fp)
 4041b8c:	0085c83a 	sub	r2,zero,r2
 4041b90:	18800015 	stw	r2,0(r3)
      return -1;
 4041b94:	00bfffc4 	movi	r2,-1
 4041b98:	00000706 	br	4041bb8 <close+0xbc>
    }
    return 0;
 4041b9c:	0005883a 	mov	r2,zero
 4041ba0:	00000506 	br	4041bb8 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4041ba4:	4041ac00 	call	4041ac0 <alt_get_errno>
 4041ba8:	1007883a 	mov	r3,r2
 4041bac:	00801444 	movi	r2,81
 4041bb0:	18800015 	stw	r2,0(r3)
    return -1;
 4041bb4:	00bfffc4 	movi	r2,-1
  }
}
 4041bb8:	e037883a 	mov	sp,fp
 4041bbc:	dfc00117 	ldw	ra,4(sp)
 4041bc0:	df000017 	ldw	fp,0(sp)
 4041bc4:	dec00204 	addi	sp,sp,8
 4041bc8:	f800283a 	ret

04041bcc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4041bcc:	defffe04 	addi	sp,sp,-8
 4041bd0:	df000115 	stw	fp,4(sp)
 4041bd4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4041bd8:	e03fff15 	stw	zero,-4(fp)
 4041bdc:	00000506 	br	4041bf4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 4041be0:	e0bfff17 	ldw	r2,-4(fp)
 4041be4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4041be8:	e0bfff17 	ldw	r2,-4(fp)
 4041bec:	10800804 	addi	r2,r2,32
 4041bf0:	e0bfff15 	stw	r2,-4(fp)
 4041bf4:	e0bfff17 	ldw	r2,-4(fp)
 4041bf8:	10820030 	cmpltui	r2,r2,2048
 4041bfc:	103ff81e 	bne	r2,zero,4041be0 <__flash_rwdata_start+0xffffecec>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4041c00:	0001883a 	nop
 4041c04:	e037883a 	mov	sp,fp
 4041c08:	df000017 	ldw	fp,0(sp)
 4041c0c:	dec00104 	addi	sp,sp,4
 4041c10:	f800283a 	ret

04041c14 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4041c14:	defffc04 	addi	sp,sp,-16
 4041c18:	df000315 	stw	fp,12(sp)
 4041c1c:	df000304 	addi	fp,sp,12
 4041c20:	e13ffd15 	stw	r4,-12(fp)
 4041c24:	e17ffe15 	stw	r5,-8(fp)
 4041c28:	e1bfff15 	stw	r6,-4(fp)
  return len;
 4041c2c:	e0bfff17 	ldw	r2,-4(fp)
}
 4041c30:	e037883a 	mov	sp,fp
 4041c34:	df000017 	ldw	fp,0(sp)
 4041c38:	dec00104 	addi	sp,sp,4
 4041c3c:	f800283a 	ret

04041c40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4041c40:	defffe04 	addi	sp,sp,-8
 4041c44:	dfc00115 	stw	ra,4(sp)
 4041c48:	df000015 	stw	fp,0(sp)
 4041c4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4041c50:	d0a00617 	ldw	r2,-32744(gp)
 4041c54:	10000326 	beq	r2,zero,4041c64 <alt_get_errno+0x24>
 4041c58:	d0a00617 	ldw	r2,-32744(gp)
 4041c5c:	103ee83a 	callr	r2
 4041c60:	00000106 	br	4041c68 <alt_get_errno+0x28>
 4041c64:	d0a01d04 	addi	r2,gp,-32652
}
 4041c68:	e037883a 	mov	sp,fp
 4041c6c:	dfc00117 	ldw	ra,4(sp)
 4041c70:	df000017 	ldw	fp,0(sp)
 4041c74:	dec00204 	addi	sp,sp,8
 4041c78:	f800283a 	ret

04041c7c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4041c7c:	defffa04 	addi	sp,sp,-24
 4041c80:	dfc00515 	stw	ra,20(sp)
 4041c84:	df000415 	stw	fp,16(sp)
 4041c88:	df000404 	addi	fp,sp,16
 4041c8c:	e13ffe15 	stw	r4,-8(fp)
 4041c90:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4041c94:	e0bffe17 	ldw	r2,-8(fp)
 4041c98:	10000326 	beq	r2,zero,4041ca8 <alt_dev_llist_insert+0x2c>
 4041c9c:	e0bffe17 	ldw	r2,-8(fp)
 4041ca0:	10800217 	ldw	r2,8(r2)
 4041ca4:	1000061e 	bne	r2,zero,4041cc0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 4041ca8:	4041c400 	call	4041c40 <alt_get_errno>
 4041cac:	1007883a 	mov	r3,r2
 4041cb0:	00800584 	movi	r2,22
 4041cb4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 4041cb8:	00bffa84 	movi	r2,-22
 4041cbc:	00001306 	br	4041d0c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4041cc0:	e0bffe17 	ldw	r2,-8(fp)
 4041cc4:	e0ffff17 	ldw	r3,-4(fp)
 4041cc8:	e0fffc15 	stw	r3,-16(fp)
 4041ccc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4041cd0:	e0bffd17 	ldw	r2,-12(fp)
 4041cd4:	e0fffc17 	ldw	r3,-16(fp)
 4041cd8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4041cdc:	e0bffc17 	ldw	r2,-16(fp)
 4041ce0:	10c00017 	ldw	r3,0(r2)
 4041ce4:	e0bffd17 	ldw	r2,-12(fp)
 4041ce8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4041cec:	e0bffc17 	ldw	r2,-16(fp)
 4041cf0:	10800017 	ldw	r2,0(r2)
 4041cf4:	e0fffd17 	ldw	r3,-12(fp)
 4041cf8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4041cfc:	e0bffc17 	ldw	r2,-16(fp)
 4041d00:	e0fffd17 	ldw	r3,-12(fp)
 4041d04:	10c00015 	stw	r3,0(r2)

  return 0;  
 4041d08:	0005883a 	mov	r2,zero
}
 4041d0c:	e037883a 	mov	sp,fp
 4041d10:	dfc00117 	ldw	ra,4(sp)
 4041d14:	df000017 	ldw	fp,0(sp)
 4041d18:	dec00204 	addi	sp,sp,8
 4041d1c:	f800283a 	ret

04041d20 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 4041d20:	defffd04 	addi	sp,sp,-12
 4041d24:	dfc00215 	stw	ra,8(sp)
 4041d28:	df000115 	stw	fp,4(sp)
 4041d2c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4041d30:	00810134 	movhi	r2,1028
 4041d34:	108bad04 	addi	r2,r2,11956
 4041d38:	e0bfff15 	stw	r2,-4(fp)
 4041d3c:	00000606 	br	4041d58 <_do_ctors+0x38>
        (*ctor) (); 
 4041d40:	e0bfff17 	ldw	r2,-4(fp)
 4041d44:	10800017 	ldw	r2,0(r2)
 4041d48:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4041d4c:	e0bfff17 	ldw	r2,-4(fp)
 4041d50:	10bfff04 	addi	r2,r2,-4
 4041d54:	e0bfff15 	stw	r2,-4(fp)
 4041d58:	e0ffff17 	ldw	r3,-4(fp)
 4041d5c:	00810134 	movhi	r2,1028
 4041d60:	108bae04 	addi	r2,r2,11960
 4041d64:	18bff62e 	bgeu	r3,r2,4041d40 <__flash_rwdata_start+0xffffee4c>
        (*ctor) (); 
}
 4041d68:	0001883a 	nop
 4041d6c:	e037883a 	mov	sp,fp
 4041d70:	dfc00117 	ldw	ra,4(sp)
 4041d74:	df000017 	ldw	fp,0(sp)
 4041d78:	dec00204 	addi	sp,sp,8
 4041d7c:	f800283a 	ret

04041d80 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 4041d80:	defffd04 	addi	sp,sp,-12
 4041d84:	dfc00215 	stw	ra,8(sp)
 4041d88:	df000115 	stw	fp,4(sp)
 4041d8c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4041d90:	00810134 	movhi	r2,1028
 4041d94:	108bad04 	addi	r2,r2,11956
 4041d98:	e0bfff15 	stw	r2,-4(fp)
 4041d9c:	00000606 	br	4041db8 <_do_dtors+0x38>
        (*dtor) (); 
 4041da0:	e0bfff17 	ldw	r2,-4(fp)
 4041da4:	10800017 	ldw	r2,0(r2)
 4041da8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4041dac:	e0bfff17 	ldw	r2,-4(fp)
 4041db0:	10bfff04 	addi	r2,r2,-4
 4041db4:	e0bfff15 	stw	r2,-4(fp)
 4041db8:	e0ffff17 	ldw	r3,-4(fp)
 4041dbc:	00810134 	movhi	r2,1028
 4041dc0:	108bae04 	addi	r2,r2,11960
 4041dc4:	18bff62e 	bgeu	r3,r2,4041da0 <__flash_rwdata_start+0xffffeeac>
        (*dtor) (); 
}
 4041dc8:	0001883a 	nop
 4041dcc:	e037883a 	mov	sp,fp
 4041dd0:	dfc00117 	ldw	ra,4(sp)
 4041dd4:	df000017 	ldw	fp,0(sp)
 4041dd8:	dec00204 	addi	sp,sp,8
 4041ddc:	f800283a 	ret

04041de0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 4041de0:	defffe04 	addi	sp,sp,-8
 4041de4:	dfc00115 	stw	ra,4(sp)
 4041de8:	df000015 	stw	fp,0(sp)
 4041dec:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 4041df0:	01440004 	movi	r5,4096
 4041df4:	0009883a 	mov	r4,zero
 4041df8:	40428b00 	call	40428b0 <alt_icache_flush>
#endif
}
 4041dfc:	0001883a 	nop
 4041e00:	e037883a 	mov	sp,fp
 4041e04:	dfc00117 	ldw	ra,4(sp)
 4041e08:	df000017 	ldw	fp,0(sp)
 4041e0c:	dec00204 	addi	sp,sp,8
 4041e10:	f800283a 	ret

04041e14 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4041e14:	defff904 	addi	sp,sp,-28
 4041e18:	dfc00615 	stw	ra,24(sp)
 4041e1c:	df000515 	stw	fp,20(sp)
 4041e20:	df000504 	addi	fp,sp,20
 4041e24:	e13ffc15 	stw	r4,-16(fp)
 4041e28:	e17ffd15 	stw	r5,-12(fp)
 4041e2c:	e1bffe15 	stw	r6,-8(fp)
 4041e30:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4041e34:	e0800217 	ldw	r2,8(fp)
 4041e38:	d8800015 	stw	r2,0(sp)
 4041e3c:	e1ffff17 	ldw	r7,-4(fp)
 4041e40:	e1bffe17 	ldw	r6,-8(fp)
 4041e44:	e17ffd17 	ldw	r5,-12(fp)
 4041e48:	e13ffc17 	ldw	r4,-16(fp)
 4041e4c:	4041fc40 	call	4041fc4 <alt_iic_isr_register>
}  
 4041e50:	e037883a 	mov	sp,fp
 4041e54:	dfc00117 	ldw	ra,4(sp)
 4041e58:	df000017 	ldw	fp,0(sp)
 4041e5c:	dec00204 	addi	sp,sp,8
 4041e60:	f800283a 	ret

04041e64 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4041e64:	defff904 	addi	sp,sp,-28
 4041e68:	df000615 	stw	fp,24(sp)
 4041e6c:	df000604 	addi	fp,sp,24
 4041e70:	e13ffe15 	stw	r4,-8(fp)
 4041e74:	e17fff15 	stw	r5,-4(fp)
 4041e78:	e0bfff17 	ldw	r2,-4(fp)
 4041e7c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4041e80:	0005303a 	rdctl	r2,status
 4041e84:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4041e88:	e0fffb17 	ldw	r3,-20(fp)
 4041e8c:	00bfff84 	movi	r2,-2
 4041e90:	1884703a 	and	r2,r3,r2
 4041e94:	1001703a 	wrctl	status,r2
  
  return context;
 4041e98:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4041e9c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 4041ea0:	00c00044 	movi	r3,1
 4041ea4:	e0bffa17 	ldw	r2,-24(fp)
 4041ea8:	1884983a 	sll	r2,r3,r2
 4041eac:	1007883a 	mov	r3,r2
 4041eb0:	d0a01917 	ldw	r2,-32668(gp)
 4041eb4:	1884b03a 	or	r2,r3,r2
 4041eb8:	d0a01915 	stw	r2,-32668(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4041ebc:	d0a01917 	ldw	r2,-32668(gp)
 4041ec0:	100170fa 	wrctl	ienable,r2
 4041ec4:	e0bffc17 	ldw	r2,-16(fp)
 4041ec8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4041ecc:	e0bffd17 	ldw	r2,-12(fp)
 4041ed0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4041ed4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 4041ed8:	0001883a 	nop
}
 4041edc:	e037883a 	mov	sp,fp
 4041ee0:	df000017 	ldw	fp,0(sp)
 4041ee4:	dec00104 	addi	sp,sp,4
 4041ee8:	f800283a 	ret

04041eec <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 4041eec:	defff904 	addi	sp,sp,-28
 4041ef0:	df000615 	stw	fp,24(sp)
 4041ef4:	df000604 	addi	fp,sp,24
 4041ef8:	e13ffe15 	stw	r4,-8(fp)
 4041efc:	e17fff15 	stw	r5,-4(fp)
 4041f00:	e0bfff17 	ldw	r2,-4(fp)
 4041f04:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4041f08:	0005303a 	rdctl	r2,status
 4041f0c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4041f10:	e0fffb17 	ldw	r3,-20(fp)
 4041f14:	00bfff84 	movi	r2,-2
 4041f18:	1884703a 	and	r2,r3,r2
 4041f1c:	1001703a 	wrctl	status,r2
  
  return context;
 4041f20:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4041f24:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 4041f28:	00c00044 	movi	r3,1
 4041f2c:	e0bffa17 	ldw	r2,-24(fp)
 4041f30:	1884983a 	sll	r2,r3,r2
 4041f34:	0084303a 	nor	r2,zero,r2
 4041f38:	1007883a 	mov	r3,r2
 4041f3c:	d0a01917 	ldw	r2,-32668(gp)
 4041f40:	1884703a 	and	r2,r3,r2
 4041f44:	d0a01915 	stw	r2,-32668(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4041f48:	d0a01917 	ldw	r2,-32668(gp)
 4041f4c:	100170fa 	wrctl	ienable,r2
 4041f50:	e0bffc17 	ldw	r2,-16(fp)
 4041f54:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4041f58:	e0bffd17 	ldw	r2,-12(fp)
 4041f5c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4041f60:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 4041f64:	0001883a 	nop
}
 4041f68:	e037883a 	mov	sp,fp
 4041f6c:	df000017 	ldw	fp,0(sp)
 4041f70:	dec00104 	addi	sp,sp,4
 4041f74:	f800283a 	ret

04041f78 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 4041f78:	defffc04 	addi	sp,sp,-16
 4041f7c:	df000315 	stw	fp,12(sp)
 4041f80:	df000304 	addi	fp,sp,12
 4041f84:	e13ffe15 	stw	r4,-8(fp)
 4041f88:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4041f8c:	000530fa 	rdctl	r2,ienable
 4041f90:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4041f94:	00c00044 	movi	r3,1
 4041f98:	e0bfff17 	ldw	r2,-4(fp)
 4041f9c:	1884983a 	sll	r2,r3,r2
 4041fa0:	1007883a 	mov	r3,r2
 4041fa4:	e0bffd17 	ldw	r2,-12(fp)
 4041fa8:	1884703a 	and	r2,r3,r2
 4041fac:	1004c03a 	cmpne	r2,r2,zero
 4041fb0:	10803fcc 	andi	r2,r2,255
}
 4041fb4:	e037883a 	mov	sp,fp
 4041fb8:	df000017 	ldw	fp,0(sp)
 4041fbc:	dec00104 	addi	sp,sp,4
 4041fc0:	f800283a 	ret

04041fc4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4041fc4:	defff504 	addi	sp,sp,-44
 4041fc8:	dfc00a15 	stw	ra,40(sp)
 4041fcc:	df000915 	stw	fp,36(sp)
 4041fd0:	df000904 	addi	fp,sp,36
 4041fd4:	e13ffc15 	stw	r4,-16(fp)
 4041fd8:	e17ffd15 	stw	r5,-12(fp)
 4041fdc:	e1bffe15 	stw	r6,-8(fp)
 4041fe0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 4041fe4:	00bffa84 	movi	r2,-22
 4041fe8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 4041fec:	e0bffd17 	ldw	r2,-12(fp)
 4041ff0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 4041ff4:	e0bff817 	ldw	r2,-32(fp)
 4041ff8:	10800808 	cmpgei	r2,r2,32
 4041ffc:	1000271e 	bne	r2,zero,404209c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4042000:	0005303a 	rdctl	r2,status
 4042004:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4042008:	e0fffb17 	ldw	r3,-20(fp)
 404200c:	00bfff84 	movi	r2,-2
 4042010:	1884703a 	and	r2,r3,r2
 4042014:	1001703a 	wrctl	status,r2
  
  return context;
 4042018:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 404201c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 4042020:	00800034 	movhi	r2,0
 4042024:	1085cc04 	addi	r2,r2,5936
 4042028:	e0fff817 	ldw	r3,-32(fp)
 404202c:	180690fa 	slli	r3,r3,3
 4042030:	10c5883a 	add	r2,r2,r3
 4042034:	e0fffe17 	ldw	r3,-8(fp)
 4042038:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 404203c:	00800034 	movhi	r2,0
 4042040:	1085cc04 	addi	r2,r2,5936
 4042044:	e0fff817 	ldw	r3,-32(fp)
 4042048:	180690fa 	slli	r3,r3,3
 404204c:	10c5883a 	add	r2,r2,r3
 4042050:	10800104 	addi	r2,r2,4
 4042054:	e0ffff17 	ldw	r3,-4(fp)
 4042058:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 404205c:	e0bffe17 	ldw	r2,-8(fp)
 4042060:	10000526 	beq	r2,zero,4042078 <alt_iic_isr_register+0xb4>
 4042064:	e0bff817 	ldw	r2,-32(fp)
 4042068:	100b883a 	mov	r5,r2
 404206c:	e13ffc17 	ldw	r4,-16(fp)
 4042070:	4041e640 	call	4041e64 <alt_ic_irq_enable>
 4042074:	00000406 	br	4042088 <alt_iic_isr_register+0xc4>
 4042078:	e0bff817 	ldw	r2,-32(fp)
 404207c:	100b883a 	mov	r5,r2
 4042080:	e13ffc17 	ldw	r4,-16(fp)
 4042084:	4041eec0 	call	4041eec <alt_ic_irq_disable>
 4042088:	e0bff715 	stw	r2,-36(fp)
 404208c:	e0bffa17 	ldw	r2,-24(fp)
 4042090:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4042094:	e0bff917 	ldw	r2,-28(fp)
 4042098:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 404209c:	e0bff717 	ldw	r2,-36(fp)
}
 40420a0:	e037883a 	mov	sp,fp
 40420a4:	dfc00117 	ldw	ra,4(sp)
 40420a8:	df000017 	ldw	fp,0(sp)
 40420ac:	dec00204 	addi	sp,sp,8
 40420b0:	f800283a 	ret

040420b4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 40420b4:	defff904 	addi	sp,sp,-28
 40420b8:	dfc00615 	stw	ra,24(sp)
 40420bc:	df000515 	stw	fp,20(sp)
 40420c0:	df000504 	addi	fp,sp,20
 40420c4:	e13ffc15 	stw	r4,-16(fp)
 40420c8:	e17ffd15 	stw	r5,-12(fp)
 40420cc:	e1bffe15 	stw	r6,-8(fp)
 40420d0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 40420d4:	e1bfff17 	ldw	r6,-4(fp)
 40420d8:	e17ffe17 	ldw	r5,-8(fp)
 40420dc:	e13ffd17 	ldw	r4,-12(fp)
 40420e0:	40422f40 	call	40422f4 <open>
 40420e4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 40420e8:	e0bffb17 	ldw	r2,-20(fp)
 40420ec:	10001c16 	blt	r2,zero,4042160 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 40420f0:	00800034 	movhi	r2,0
 40420f4:	10843f04 	addi	r2,r2,4348
 40420f8:	e0fffb17 	ldw	r3,-20(fp)
 40420fc:	18c00324 	muli	r3,r3,12
 4042100:	10c5883a 	add	r2,r2,r3
 4042104:	10c00017 	ldw	r3,0(r2)
 4042108:	e0bffc17 	ldw	r2,-16(fp)
 404210c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 4042110:	00800034 	movhi	r2,0
 4042114:	10843f04 	addi	r2,r2,4348
 4042118:	e0fffb17 	ldw	r3,-20(fp)
 404211c:	18c00324 	muli	r3,r3,12
 4042120:	10c5883a 	add	r2,r2,r3
 4042124:	10800104 	addi	r2,r2,4
 4042128:	10c00017 	ldw	r3,0(r2)
 404212c:	e0bffc17 	ldw	r2,-16(fp)
 4042130:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4042134:	00800034 	movhi	r2,0
 4042138:	10843f04 	addi	r2,r2,4348
 404213c:	e0fffb17 	ldw	r3,-20(fp)
 4042140:	18c00324 	muli	r3,r3,12
 4042144:	10c5883a 	add	r2,r2,r3
 4042148:	10800204 	addi	r2,r2,8
 404214c:	10c00017 	ldw	r3,0(r2)
 4042150:	e0bffc17 	ldw	r2,-16(fp)
 4042154:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4042158:	e13ffb17 	ldw	r4,-20(fp)
 404215c:	40424480 	call	4042448 <alt_release_fd>
  }
} 
 4042160:	0001883a 	nop
 4042164:	e037883a 	mov	sp,fp
 4042168:	dfc00117 	ldw	ra,4(sp)
 404216c:	df000017 	ldw	fp,0(sp)
 4042170:	dec00204 	addi	sp,sp,8
 4042174:	f800283a 	ret

04042178 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4042178:	defffb04 	addi	sp,sp,-20
 404217c:	dfc00415 	stw	ra,16(sp)
 4042180:	df000315 	stw	fp,12(sp)
 4042184:	df000304 	addi	fp,sp,12
 4042188:	e13ffd15 	stw	r4,-12(fp)
 404218c:	e17ffe15 	stw	r5,-8(fp)
 4042190:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4042194:	01c07fc4 	movi	r7,511
 4042198:	01800044 	movi	r6,1
 404219c:	e17ffd17 	ldw	r5,-12(fp)
 40421a0:	01000034 	movhi	r4,0
 40421a4:	21044204 	addi	r4,r4,4360
 40421a8:	40420b40 	call	40420b4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 40421ac:	01c07fc4 	movi	r7,511
 40421b0:	000d883a 	mov	r6,zero
 40421b4:	e17ffe17 	ldw	r5,-8(fp)
 40421b8:	01000034 	movhi	r4,0
 40421bc:	21043f04 	addi	r4,r4,4348
 40421c0:	40420b40 	call	40420b4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 40421c4:	01c07fc4 	movi	r7,511
 40421c8:	01800044 	movi	r6,1
 40421cc:	e17fff17 	ldw	r5,-4(fp)
 40421d0:	01000034 	movhi	r4,0
 40421d4:	21044504 	addi	r4,r4,4372
 40421d8:	40420b40 	call	40420b4 <alt_open_fd>
}  
 40421dc:	0001883a 	nop
 40421e0:	e037883a 	mov	sp,fp
 40421e4:	dfc00117 	ldw	ra,4(sp)
 40421e8:	df000017 	ldw	fp,0(sp)
 40421ec:	dec00204 	addi	sp,sp,8
 40421f0:	f800283a 	ret

040421f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40421f4:	defffe04 	addi	sp,sp,-8
 40421f8:	dfc00115 	stw	ra,4(sp)
 40421fc:	df000015 	stw	fp,0(sp)
 4042200:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4042204:	d0a00617 	ldw	r2,-32744(gp)
 4042208:	10000326 	beq	r2,zero,4042218 <alt_get_errno+0x24>
 404220c:	d0a00617 	ldw	r2,-32744(gp)
 4042210:	103ee83a 	callr	r2
 4042214:	00000106 	br	404221c <alt_get_errno+0x28>
 4042218:	d0a01d04 	addi	r2,gp,-32652
}
 404221c:	e037883a 	mov	sp,fp
 4042220:	dfc00117 	ldw	ra,4(sp)
 4042224:	df000017 	ldw	fp,0(sp)
 4042228:	dec00204 	addi	sp,sp,8
 404222c:	f800283a 	ret

04042230 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 4042230:	defffd04 	addi	sp,sp,-12
 4042234:	df000215 	stw	fp,8(sp)
 4042238:	df000204 	addi	fp,sp,8
 404223c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4042240:	e0bfff17 	ldw	r2,-4(fp)
 4042244:	10800217 	ldw	r2,8(r2)
 4042248:	10d00034 	orhi	r3,r2,16384
 404224c:	e0bfff17 	ldw	r2,-4(fp)
 4042250:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4042254:	e03ffe15 	stw	zero,-8(fp)
 4042258:	00001d06 	br	40422d0 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 404225c:	00800034 	movhi	r2,0
 4042260:	10843f04 	addi	r2,r2,4348
 4042264:	e0fffe17 	ldw	r3,-8(fp)
 4042268:	18c00324 	muli	r3,r3,12
 404226c:	10c5883a 	add	r2,r2,r3
 4042270:	10c00017 	ldw	r3,0(r2)
 4042274:	e0bfff17 	ldw	r2,-4(fp)
 4042278:	10800017 	ldw	r2,0(r2)
 404227c:	1880111e 	bne	r3,r2,40422c4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4042280:	00800034 	movhi	r2,0
 4042284:	10843f04 	addi	r2,r2,4348
 4042288:	e0fffe17 	ldw	r3,-8(fp)
 404228c:	18c00324 	muli	r3,r3,12
 4042290:	10c5883a 	add	r2,r2,r3
 4042294:	10800204 	addi	r2,r2,8
 4042298:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 404229c:	1000090e 	bge	r2,zero,40422c4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 40422a0:	e0bffe17 	ldw	r2,-8(fp)
 40422a4:	10c00324 	muli	r3,r2,12
 40422a8:	00800034 	movhi	r2,0
 40422ac:	10843f04 	addi	r2,r2,4348
 40422b0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 40422b4:	e0bfff17 	ldw	r2,-4(fp)
 40422b8:	18800226 	beq	r3,r2,40422c4 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 40422bc:	00bffcc4 	movi	r2,-13
 40422c0:	00000806 	br	40422e4 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 40422c4:	e0bffe17 	ldw	r2,-8(fp)
 40422c8:	10800044 	addi	r2,r2,1
 40422cc:	e0bffe15 	stw	r2,-8(fp)
 40422d0:	d0a00517 	ldw	r2,-32748(gp)
 40422d4:	1007883a 	mov	r3,r2
 40422d8:	e0bffe17 	ldw	r2,-8(fp)
 40422dc:	18bfdf2e 	bgeu	r3,r2,404225c <__flash_rwdata_start+0xfffff368>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 40422e0:	0005883a 	mov	r2,zero
}
 40422e4:	e037883a 	mov	sp,fp
 40422e8:	df000017 	ldw	fp,0(sp)
 40422ec:	dec00104 	addi	sp,sp,4
 40422f0:	f800283a 	ret

040422f4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 40422f4:	defff604 	addi	sp,sp,-40
 40422f8:	dfc00915 	stw	ra,36(sp)
 40422fc:	df000815 	stw	fp,32(sp)
 4042300:	df000804 	addi	fp,sp,32
 4042304:	e13ffd15 	stw	r4,-12(fp)
 4042308:	e17ffe15 	stw	r5,-8(fp)
 404230c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4042310:	00bfffc4 	movi	r2,-1
 4042314:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 4042318:	00bffb44 	movi	r2,-19
 404231c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 4042320:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4042324:	d1600304 	addi	r5,gp,-32756
 4042328:	e13ffd17 	ldw	r4,-12(fp)
 404232c:	40426740 	call	4042674 <alt_find_dev>
 4042330:	e0bff815 	stw	r2,-32(fp)
 4042334:	e0bff817 	ldw	r2,-32(fp)
 4042338:	1000051e 	bne	r2,zero,4042350 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 404233c:	e13ffd17 	ldw	r4,-12(fp)
 4042340:	40427040 	call	4042704 <alt_find_file>
 4042344:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 4042348:	00800044 	movi	r2,1
 404234c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4042350:	e0bff817 	ldw	r2,-32(fp)
 4042354:	10002926 	beq	r2,zero,40423fc <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4042358:	e13ff817 	ldw	r4,-32(fp)
 404235c:	404280c0 	call	404280c <alt_get_fd>
 4042360:	e0bff915 	stw	r2,-28(fp)
 4042364:	e0bff917 	ldw	r2,-28(fp)
 4042368:	1000030e 	bge	r2,zero,4042378 <open+0x84>
    {
      status = index;
 404236c:	e0bff917 	ldw	r2,-28(fp)
 4042370:	e0bffa15 	stw	r2,-24(fp)
 4042374:	00002306 	br	4042404 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 4042378:	e0bff917 	ldw	r2,-28(fp)
 404237c:	10c00324 	muli	r3,r2,12
 4042380:	00800034 	movhi	r2,0
 4042384:	10843f04 	addi	r2,r2,4348
 4042388:	1885883a 	add	r2,r3,r2
 404238c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4042390:	e0fffe17 	ldw	r3,-8(fp)
 4042394:	00900034 	movhi	r2,16384
 4042398:	10bfffc4 	addi	r2,r2,-1
 404239c:	1886703a 	and	r3,r3,r2
 40423a0:	e0bffc17 	ldw	r2,-16(fp)
 40423a4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 40423a8:	e0bffb17 	ldw	r2,-20(fp)
 40423ac:	1000051e 	bne	r2,zero,40423c4 <open+0xd0>
 40423b0:	e13ffc17 	ldw	r4,-16(fp)
 40423b4:	40422300 	call	4042230 <alt_file_locked>
 40423b8:	e0bffa15 	stw	r2,-24(fp)
 40423bc:	e0bffa17 	ldw	r2,-24(fp)
 40423c0:	10001016 	blt	r2,zero,4042404 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 40423c4:	e0bff817 	ldw	r2,-32(fp)
 40423c8:	10800317 	ldw	r2,12(r2)
 40423cc:	10000826 	beq	r2,zero,40423f0 <open+0xfc>
 40423d0:	e0bff817 	ldw	r2,-32(fp)
 40423d4:	10800317 	ldw	r2,12(r2)
 40423d8:	e1ffff17 	ldw	r7,-4(fp)
 40423dc:	e1bffe17 	ldw	r6,-8(fp)
 40423e0:	e17ffd17 	ldw	r5,-12(fp)
 40423e4:	e13ffc17 	ldw	r4,-16(fp)
 40423e8:	103ee83a 	callr	r2
 40423ec:	00000106 	br	40423f4 <open+0x100>
 40423f0:	0005883a 	mov	r2,zero
 40423f4:	e0bffa15 	stw	r2,-24(fp)
 40423f8:	00000206 	br	4042404 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 40423fc:	00bffb44 	movi	r2,-19
 4042400:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 4042404:	e0bffa17 	ldw	r2,-24(fp)
 4042408:	1000090e 	bge	r2,zero,4042430 <open+0x13c>
  {
    alt_release_fd (index);  
 404240c:	e13ff917 	ldw	r4,-28(fp)
 4042410:	40424480 	call	4042448 <alt_release_fd>
    ALT_ERRNO = -status;
 4042414:	40421f40 	call	40421f4 <alt_get_errno>
 4042418:	1007883a 	mov	r3,r2
 404241c:	e0bffa17 	ldw	r2,-24(fp)
 4042420:	0085c83a 	sub	r2,zero,r2
 4042424:	18800015 	stw	r2,0(r3)
    return -1;
 4042428:	00bfffc4 	movi	r2,-1
 404242c:	00000106 	br	4042434 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 4042430:	e0bff917 	ldw	r2,-28(fp)
}
 4042434:	e037883a 	mov	sp,fp
 4042438:	dfc00117 	ldw	ra,4(sp)
 404243c:	df000017 	ldw	fp,0(sp)
 4042440:	dec00204 	addi	sp,sp,8
 4042444:	f800283a 	ret

04042448 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4042448:	defffe04 	addi	sp,sp,-8
 404244c:	df000115 	stw	fp,4(sp)
 4042450:	df000104 	addi	fp,sp,4
 4042454:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 4042458:	e0bfff17 	ldw	r2,-4(fp)
 404245c:	108000d0 	cmplti	r2,r2,3
 4042460:	10000d1e 	bne	r2,zero,4042498 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 4042464:	00800034 	movhi	r2,0
 4042468:	10843f04 	addi	r2,r2,4348
 404246c:	e0ffff17 	ldw	r3,-4(fp)
 4042470:	18c00324 	muli	r3,r3,12
 4042474:	10c5883a 	add	r2,r2,r3
 4042478:	10800204 	addi	r2,r2,8
 404247c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 4042480:	00800034 	movhi	r2,0
 4042484:	10843f04 	addi	r2,r2,4348
 4042488:	e0ffff17 	ldw	r3,-4(fp)
 404248c:	18c00324 	muli	r3,r3,12
 4042490:	10c5883a 	add	r2,r2,r3
 4042494:	10000015 	stw	zero,0(r2)
  }
}
 4042498:	0001883a 	nop
 404249c:	e037883a 	mov	sp,fp
 40424a0:	df000017 	ldw	fp,0(sp)
 40424a4:	dec00104 	addi	sp,sp,4
 40424a8:	f800283a 	ret

040424ac <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 40424ac:	defffa04 	addi	sp,sp,-24
 40424b0:	df000515 	stw	fp,20(sp)
 40424b4:	df000504 	addi	fp,sp,20
 40424b8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40424bc:	0005303a 	rdctl	r2,status
 40424c0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40424c4:	e0fffc17 	ldw	r3,-16(fp)
 40424c8:	00bfff84 	movi	r2,-2
 40424cc:	1884703a 	and	r2,r3,r2
 40424d0:	1001703a 	wrctl	status,r2
  
  return context;
 40424d4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 40424d8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 40424dc:	e0bfff17 	ldw	r2,-4(fp)
 40424e0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 40424e4:	e0bffd17 	ldw	r2,-12(fp)
 40424e8:	10800017 	ldw	r2,0(r2)
 40424ec:	e0fffd17 	ldw	r3,-12(fp)
 40424f0:	18c00117 	ldw	r3,4(r3)
 40424f4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 40424f8:	e0bffd17 	ldw	r2,-12(fp)
 40424fc:	10800117 	ldw	r2,4(r2)
 4042500:	e0fffd17 	ldw	r3,-12(fp)
 4042504:	18c00017 	ldw	r3,0(r3)
 4042508:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 404250c:	e0bffd17 	ldw	r2,-12(fp)
 4042510:	e0fffd17 	ldw	r3,-12(fp)
 4042514:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 4042518:	e0bffd17 	ldw	r2,-12(fp)
 404251c:	e0fffd17 	ldw	r3,-12(fp)
 4042520:	10c00015 	stw	r3,0(r2)
 4042524:	e0bffb17 	ldw	r2,-20(fp)
 4042528:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 404252c:	e0bffe17 	ldw	r2,-8(fp)
 4042530:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 4042534:	0001883a 	nop
 4042538:	e037883a 	mov	sp,fp
 404253c:	df000017 	ldw	fp,0(sp)
 4042540:	dec00104 	addi	sp,sp,4
 4042544:	f800283a 	ret

04042548 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4042548:	defffb04 	addi	sp,sp,-20
 404254c:	dfc00415 	stw	ra,16(sp)
 4042550:	df000315 	stw	fp,12(sp)
 4042554:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4042558:	d0a00817 	ldw	r2,-32736(gp)
 404255c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4042560:	d0a01b17 	ldw	r2,-32660(gp)
 4042564:	10800044 	addi	r2,r2,1
 4042568:	d0a01b15 	stw	r2,-32660(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 404256c:	00002e06 	br	4042628 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 4042570:	e0bffd17 	ldw	r2,-12(fp)
 4042574:	10800017 	ldw	r2,0(r2)
 4042578:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 404257c:	e0bffd17 	ldw	r2,-12(fp)
 4042580:	10800403 	ldbu	r2,16(r2)
 4042584:	10803fcc 	andi	r2,r2,255
 4042588:	10000426 	beq	r2,zero,404259c <alt_tick+0x54>
 404258c:	d0a01b17 	ldw	r2,-32660(gp)
 4042590:	1000021e 	bne	r2,zero,404259c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 4042594:	e0bffd17 	ldw	r2,-12(fp)
 4042598:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 404259c:	e0bffd17 	ldw	r2,-12(fp)
 40425a0:	10800217 	ldw	r2,8(r2)
 40425a4:	d0e01b17 	ldw	r3,-32660(gp)
 40425a8:	18801d36 	bltu	r3,r2,4042620 <alt_tick+0xd8>
 40425ac:	e0bffd17 	ldw	r2,-12(fp)
 40425b0:	10800403 	ldbu	r2,16(r2)
 40425b4:	10803fcc 	andi	r2,r2,255
 40425b8:	1000191e 	bne	r2,zero,4042620 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 40425bc:	e0bffd17 	ldw	r2,-12(fp)
 40425c0:	10800317 	ldw	r2,12(r2)
 40425c4:	e0fffd17 	ldw	r3,-12(fp)
 40425c8:	18c00517 	ldw	r3,20(r3)
 40425cc:	1809883a 	mov	r4,r3
 40425d0:	103ee83a 	callr	r2
 40425d4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 40425d8:	e0bfff17 	ldw	r2,-4(fp)
 40425dc:	1000031e 	bne	r2,zero,40425ec <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 40425e0:	e13ffd17 	ldw	r4,-12(fp)
 40425e4:	40424ac0 	call	40424ac <alt_alarm_stop>
 40425e8:	00000d06 	br	4042620 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 40425ec:	e0bffd17 	ldw	r2,-12(fp)
 40425f0:	10c00217 	ldw	r3,8(r2)
 40425f4:	e0bfff17 	ldw	r2,-4(fp)
 40425f8:	1887883a 	add	r3,r3,r2
 40425fc:	e0bffd17 	ldw	r2,-12(fp)
 4042600:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4042604:	e0bffd17 	ldw	r2,-12(fp)
 4042608:	10c00217 	ldw	r3,8(r2)
 404260c:	d0a01b17 	ldw	r2,-32660(gp)
 4042610:	1880032e 	bgeu	r3,r2,4042620 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 4042614:	e0bffd17 	ldw	r2,-12(fp)
 4042618:	00c00044 	movi	r3,1
 404261c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 4042620:	e0bffe17 	ldw	r2,-8(fp)
 4042624:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4042628:	e0fffd17 	ldw	r3,-12(fp)
 404262c:	d0a00804 	addi	r2,gp,-32736
 4042630:	18bfcf1e 	bne	r3,r2,4042570 <__flash_rwdata_start+0xfffff67c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 4042634:	0001883a 	nop
}
 4042638:	0001883a 	nop
 404263c:	e037883a 	mov	sp,fp
 4042640:	dfc00117 	ldw	ra,4(sp)
 4042644:	df000017 	ldw	fp,0(sp)
 4042648:	dec00204 	addi	sp,sp,8
 404264c:	f800283a 	ret

04042650 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 4042650:	deffff04 	addi	sp,sp,-4
 4042654:	df000015 	stw	fp,0(sp)
 4042658:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 404265c:	000170fa 	wrctl	ienable,zero
}
 4042660:	0001883a 	nop
 4042664:	e037883a 	mov	sp,fp
 4042668:	df000017 	ldw	fp,0(sp)
 404266c:	dec00104 	addi	sp,sp,4
 4042670:	f800283a 	ret

04042674 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4042674:	defffa04 	addi	sp,sp,-24
 4042678:	dfc00515 	stw	ra,20(sp)
 404267c:	df000415 	stw	fp,16(sp)
 4042680:	df000404 	addi	fp,sp,16
 4042684:	e13ffe15 	stw	r4,-8(fp)
 4042688:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 404268c:	e0bfff17 	ldw	r2,-4(fp)
 4042690:	10800017 	ldw	r2,0(r2)
 4042694:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4042698:	e13ffe17 	ldw	r4,-8(fp)
 404269c:	4040a380 	call	4040a38 <strlen>
 40426a0:	10800044 	addi	r2,r2,1
 40426a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 40426a8:	00000d06 	br	40426e0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 40426ac:	e0bffc17 	ldw	r2,-16(fp)
 40426b0:	10800217 	ldw	r2,8(r2)
 40426b4:	e0fffd17 	ldw	r3,-12(fp)
 40426b8:	180d883a 	mov	r6,r3
 40426bc:	e17ffe17 	ldw	r5,-8(fp)
 40426c0:	1009883a 	mov	r4,r2
 40426c4:	4042a280 	call	4042a28 <memcmp>
 40426c8:	1000021e 	bne	r2,zero,40426d4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 40426cc:	e0bffc17 	ldw	r2,-16(fp)
 40426d0:	00000706 	br	40426f0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 40426d4:	e0bffc17 	ldw	r2,-16(fp)
 40426d8:	10800017 	ldw	r2,0(r2)
 40426dc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 40426e0:	e0fffc17 	ldw	r3,-16(fp)
 40426e4:	e0bfff17 	ldw	r2,-4(fp)
 40426e8:	18bff01e 	bne	r3,r2,40426ac <__flash_rwdata_start+0xfffff7b8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 40426ec:	0005883a 	mov	r2,zero
}
 40426f0:	e037883a 	mov	sp,fp
 40426f4:	dfc00117 	ldw	ra,4(sp)
 40426f8:	df000017 	ldw	fp,0(sp)
 40426fc:	dec00204 	addi	sp,sp,8
 4042700:	f800283a 	ret

04042704 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 4042704:	defffb04 	addi	sp,sp,-20
 4042708:	dfc00415 	stw	ra,16(sp)
 404270c:	df000315 	stw	fp,12(sp)
 4042710:	df000304 	addi	fp,sp,12
 4042714:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 4042718:	d0a00117 	ldw	r2,-32764(gp)
 404271c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4042720:	00003106 	br	40427e8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 4042724:	e0bffd17 	ldw	r2,-12(fp)
 4042728:	10800217 	ldw	r2,8(r2)
 404272c:	1009883a 	mov	r4,r2
 4042730:	4040a380 	call	4040a38 <strlen>
 4042734:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 4042738:	e0bffd17 	ldw	r2,-12(fp)
 404273c:	10c00217 	ldw	r3,8(r2)
 4042740:	e0bffe17 	ldw	r2,-8(fp)
 4042744:	10bfffc4 	addi	r2,r2,-1
 4042748:	1885883a 	add	r2,r3,r2
 404274c:	10800003 	ldbu	r2,0(r2)
 4042750:	10803fcc 	andi	r2,r2,255
 4042754:	1080201c 	xori	r2,r2,128
 4042758:	10bfe004 	addi	r2,r2,-128
 404275c:	10800bd8 	cmpnei	r2,r2,47
 4042760:	1000031e 	bne	r2,zero,4042770 <alt_find_file+0x6c>
    {
      len -= 1;
 4042764:	e0bffe17 	ldw	r2,-8(fp)
 4042768:	10bfffc4 	addi	r2,r2,-1
 404276c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4042770:	e0bffe17 	ldw	r2,-8(fp)
 4042774:	e0ffff17 	ldw	r3,-4(fp)
 4042778:	1885883a 	add	r2,r3,r2
 404277c:	10800003 	ldbu	r2,0(r2)
 4042780:	10803fcc 	andi	r2,r2,255
 4042784:	1080201c 	xori	r2,r2,128
 4042788:	10bfe004 	addi	r2,r2,-128
 404278c:	10800be0 	cmpeqi	r2,r2,47
 4042790:	1000081e 	bne	r2,zero,40427b4 <alt_find_file+0xb0>
 4042794:	e0bffe17 	ldw	r2,-8(fp)
 4042798:	e0ffff17 	ldw	r3,-4(fp)
 404279c:	1885883a 	add	r2,r3,r2
 40427a0:	10800003 	ldbu	r2,0(r2)
 40427a4:	10803fcc 	andi	r2,r2,255
 40427a8:	1080201c 	xori	r2,r2,128
 40427ac:	10bfe004 	addi	r2,r2,-128
 40427b0:	10000a1e 	bne	r2,zero,40427dc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 40427b4:	e0bffd17 	ldw	r2,-12(fp)
 40427b8:	10800217 	ldw	r2,8(r2)
 40427bc:	e0fffe17 	ldw	r3,-8(fp)
 40427c0:	180d883a 	mov	r6,r3
 40427c4:	e17fff17 	ldw	r5,-4(fp)
 40427c8:	1009883a 	mov	r4,r2
 40427cc:	4042a280 	call	4042a28 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 40427d0:	1000021e 	bne	r2,zero,40427dc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 40427d4:	e0bffd17 	ldw	r2,-12(fp)
 40427d8:	00000706 	br	40427f8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 40427dc:	e0bffd17 	ldw	r2,-12(fp)
 40427e0:	10800017 	ldw	r2,0(r2)
 40427e4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 40427e8:	e0fffd17 	ldw	r3,-12(fp)
 40427ec:	d0a00104 	addi	r2,gp,-32764
 40427f0:	18bfcc1e 	bne	r3,r2,4042724 <__flash_rwdata_start+0xfffff830>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 40427f4:	0005883a 	mov	r2,zero
}
 40427f8:	e037883a 	mov	sp,fp
 40427fc:	dfc00117 	ldw	ra,4(sp)
 4042800:	df000017 	ldw	fp,0(sp)
 4042804:	dec00204 	addi	sp,sp,8
 4042808:	f800283a 	ret

0404280c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 404280c:	defffc04 	addi	sp,sp,-16
 4042810:	df000315 	stw	fp,12(sp)
 4042814:	df000304 	addi	fp,sp,12
 4042818:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 404281c:	00bffa04 	movi	r2,-24
 4042820:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4042824:	e03ffd15 	stw	zero,-12(fp)
 4042828:	00001906 	br	4042890 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 404282c:	00800034 	movhi	r2,0
 4042830:	10843f04 	addi	r2,r2,4348
 4042834:	e0fffd17 	ldw	r3,-12(fp)
 4042838:	18c00324 	muli	r3,r3,12
 404283c:	10c5883a 	add	r2,r2,r3
 4042840:	10800017 	ldw	r2,0(r2)
 4042844:	10000f1e 	bne	r2,zero,4042884 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 4042848:	00800034 	movhi	r2,0
 404284c:	10843f04 	addi	r2,r2,4348
 4042850:	e0fffd17 	ldw	r3,-12(fp)
 4042854:	18c00324 	muli	r3,r3,12
 4042858:	10c5883a 	add	r2,r2,r3
 404285c:	e0ffff17 	ldw	r3,-4(fp)
 4042860:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 4042864:	d0e00517 	ldw	r3,-32748(gp)
 4042868:	e0bffd17 	ldw	r2,-12(fp)
 404286c:	1880020e 	bge	r3,r2,4042878 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 4042870:	e0bffd17 	ldw	r2,-12(fp)
 4042874:	d0a00515 	stw	r2,-32748(gp)
      }
      rc = i;
 4042878:	e0bffd17 	ldw	r2,-12(fp)
 404287c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 4042880:	00000606 	br	404289c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4042884:	e0bffd17 	ldw	r2,-12(fp)
 4042888:	10800044 	addi	r2,r2,1
 404288c:	e0bffd15 	stw	r2,-12(fp)
 4042890:	e0bffd17 	ldw	r2,-12(fp)
 4042894:	10800810 	cmplti	r2,r2,32
 4042898:	103fe41e 	bne	r2,zero,404282c <__flash_rwdata_start+0xfffff938>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 404289c:	e0bffe17 	ldw	r2,-8(fp)
}
 40428a0:	e037883a 	mov	sp,fp
 40428a4:	df000017 	ldw	fp,0(sp)
 40428a8:	dec00104 	addi	sp,sp,4
 40428ac:	f800283a 	ret

040428b0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 40428b0:	defffb04 	addi	sp,sp,-20
 40428b4:	df000415 	stw	fp,16(sp)
 40428b8:	df000404 	addi	fp,sp,16
 40428bc:	e13ffe15 	stw	r4,-8(fp)
 40428c0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 40428c4:	e0bfff17 	ldw	r2,-4(fp)
 40428c8:	10840070 	cmpltui	r2,r2,4097
 40428cc:	1000021e 	bne	r2,zero,40428d8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 40428d0:	00840004 	movi	r2,4096
 40428d4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 40428d8:	e0fffe17 	ldw	r3,-8(fp)
 40428dc:	e0bfff17 	ldw	r2,-4(fp)
 40428e0:	1885883a 	add	r2,r3,r2
 40428e4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 40428e8:	e0bffe17 	ldw	r2,-8(fp)
 40428ec:	e0bffc15 	stw	r2,-16(fp)
 40428f0:	00000506 	br	4042908 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 40428f4:	e0bffc17 	ldw	r2,-16(fp)
 40428f8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 40428fc:	e0bffc17 	ldw	r2,-16(fp)
 4042900:	10800804 	addi	r2,r2,32
 4042904:	e0bffc15 	stw	r2,-16(fp)
 4042908:	e0fffc17 	ldw	r3,-16(fp)
 404290c:	e0bffd17 	ldw	r2,-12(fp)
 4042910:	18bff836 	bltu	r3,r2,40428f4 <__flash_rwdata_start+0xfffffa00>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 4042914:	e0bffe17 	ldw	r2,-8(fp)
 4042918:	108007cc 	andi	r2,r2,31
 404291c:	10000226 	beq	r2,zero,4042928 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 4042920:	e0bffc17 	ldw	r2,-16(fp)
 4042924:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 4042928:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 404292c:	0001883a 	nop
 4042930:	e037883a 	mov	sp,fp
 4042934:	df000017 	ldw	fp,0(sp)
 4042938:	dec00104 	addi	sp,sp,4
 404293c:	f800283a 	ret

04042940 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 4042940:	defffe04 	addi	sp,sp,-8
 4042944:	df000115 	stw	fp,4(sp)
 4042948:	df000104 	addi	fp,sp,4
 404294c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 4042950:	e0bfff17 	ldw	r2,-4(fp)
 4042954:	10bffe84 	addi	r2,r2,-6
 4042958:	10c00428 	cmpgeui	r3,r2,16
 404295c:	18001a1e 	bne	r3,zero,40429c8 <alt_exception_cause_generated_bad_addr+0x88>
 4042960:	100690ba 	slli	r3,r2,2
 4042964:	00810134 	movhi	r2,1028
 4042968:	108a5e04 	addi	r2,r2,10616
 404296c:	1885883a 	add	r2,r3,r2
 4042970:	10800017 	ldw	r2,0(r2)
 4042974:	1000683a 	jmp	r2
 4042978:	040429b8 	rdprs	r16,zero,4262
 404297c:	040429b8 	rdprs	r16,zero,4262
 4042980:	040429c8 	cmpgei	r16,zero,4263
 4042984:	040429c8 	cmpgei	r16,zero,4263
 4042988:	040429c8 	cmpgei	r16,zero,4263
 404298c:	040429b8 	rdprs	r16,zero,4262
 4042990:	040429c0 	call	40429c <_gp+0x3fabfc>
 4042994:	040429c8 	cmpgei	r16,zero,4263
 4042998:	040429b8 	rdprs	r16,zero,4262
 404299c:	040429b8 	rdprs	r16,zero,4262
 40429a0:	040429c8 	cmpgei	r16,zero,4263
 40429a4:	040429b8 	rdprs	r16,zero,4262
 40429a8:	040429c0 	call	40429c <_gp+0x3fabfc>
 40429ac:	040429c8 	cmpgei	r16,zero,4263
 40429b0:	040429c8 	cmpgei	r16,zero,4263
 40429b4:	040429b8 	rdprs	r16,zero,4262
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 40429b8:	00800044 	movi	r2,1
 40429bc:	00000306 	br	40429cc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 40429c0:	0005883a 	mov	r2,zero
 40429c4:	00000106 	br	40429cc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 40429c8:	0005883a 	mov	r2,zero
  }
}
 40429cc:	e037883a 	mov	sp,fp
 40429d0:	df000017 	ldw	fp,0(sp)
 40429d4:	dec00104 	addi	sp,sp,4
 40429d8:	f800283a 	ret

040429dc <atexit>:
 40429dc:	200b883a 	mov	r5,r4
 40429e0:	000f883a 	mov	r7,zero
 40429e4:	000d883a 	mov	r6,zero
 40429e8:	0009883a 	mov	r4,zero
 40429ec:	4042bec1 	jmpi	4042bec <__register_exitproc>

040429f0 <exit>:
 40429f0:	defffe04 	addi	sp,sp,-8
 40429f4:	000b883a 	mov	r5,zero
 40429f8:	dc000015 	stw	r16,0(sp)
 40429fc:	dfc00115 	stw	ra,4(sp)
 4042a00:	2021883a 	mov	r16,r4
 4042a04:	4042d040 	call	4042d04 <__call_exitprocs>
 4042a08:	00800034 	movhi	r2,0
 4042a0c:	1085b204 	addi	r2,r2,5832
 4042a10:	11000017 	ldw	r4,0(r2)
 4042a14:	20800f17 	ldw	r2,60(r4)
 4042a18:	10000126 	beq	r2,zero,4042a20 <exit+0x30>
 4042a1c:	103ee83a 	callr	r2
 4042a20:	8009883a 	mov	r4,r16
 4042a24:	4042e840 	call	4042e84 <_exit>

04042a28 <memcmp>:
 4042a28:	01c000c4 	movi	r7,3
 4042a2c:	3980192e 	bgeu	r7,r6,4042a94 <memcmp+0x6c>
 4042a30:	2144b03a 	or	r2,r4,r5
 4042a34:	11c4703a 	and	r2,r2,r7
 4042a38:	10000f26 	beq	r2,zero,4042a78 <memcmp+0x50>
 4042a3c:	20800003 	ldbu	r2,0(r4)
 4042a40:	28c00003 	ldbu	r3,0(r5)
 4042a44:	10c0151e 	bne	r2,r3,4042a9c <memcmp+0x74>
 4042a48:	31bfff84 	addi	r6,r6,-2
 4042a4c:	01ffffc4 	movi	r7,-1
 4042a50:	00000406 	br	4042a64 <memcmp+0x3c>
 4042a54:	20800003 	ldbu	r2,0(r4)
 4042a58:	28c00003 	ldbu	r3,0(r5)
 4042a5c:	31bfffc4 	addi	r6,r6,-1
 4042a60:	10c00e1e 	bne	r2,r3,4042a9c <memcmp+0x74>
 4042a64:	21000044 	addi	r4,r4,1
 4042a68:	29400044 	addi	r5,r5,1
 4042a6c:	31fff91e 	bne	r6,r7,4042a54 <__flash_rwdata_start+0xfffffb60>
 4042a70:	0005883a 	mov	r2,zero
 4042a74:	f800283a 	ret
 4042a78:	20c00017 	ldw	r3,0(r4)
 4042a7c:	28800017 	ldw	r2,0(r5)
 4042a80:	18bfee1e 	bne	r3,r2,4042a3c <__flash_rwdata_start+0xfffffb48>
 4042a84:	31bfff04 	addi	r6,r6,-4
 4042a88:	21000104 	addi	r4,r4,4
 4042a8c:	29400104 	addi	r5,r5,4
 4042a90:	39bff936 	bltu	r7,r6,4042a78 <__flash_rwdata_start+0xfffffb84>
 4042a94:	303fe91e 	bne	r6,zero,4042a3c <__flash_rwdata_start+0xfffffb48>
 4042a98:	003ff506 	br	4042a70 <__flash_rwdata_start+0xfffffb7c>
 4042a9c:	10c5c83a 	sub	r2,r2,r3
 4042aa0:	f800283a 	ret

04042aa4 <memcpy>:
 4042aa4:	defffd04 	addi	sp,sp,-12
 4042aa8:	dfc00215 	stw	ra,8(sp)
 4042aac:	dc400115 	stw	r17,4(sp)
 4042ab0:	dc000015 	stw	r16,0(sp)
 4042ab4:	00c003c4 	movi	r3,15
 4042ab8:	2005883a 	mov	r2,r4
 4042abc:	1980452e 	bgeu	r3,r6,4042bd4 <memcpy+0x130>
 4042ac0:	2906b03a 	or	r3,r5,r4
 4042ac4:	18c000cc 	andi	r3,r3,3
 4042ac8:	1800441e 	bne	r3,zero,4042bdc <memcpy+0x138>
 4042acc:	347ffc04 	addi	r17,r6,-16
 4042ad0:	8822d13a 	srli	r17,r17,4
 4042ad4:	28c00104 	addi	r3,r5,4
 4042ad8:	23400104 	addi	r13,r4,4
 4042adc:	8820913a 	slli	r16,r17,4
 4042ae0:	2b000204 	addi	r12,r5,8
 4042ae4:	22c00204 	addi	r11,r4,8
 4042ae8:	84000504 	addi	r16,r16,20
 4042aec:	2a800304 	addi	r10,r5,12
 4042af0:	22400304 	addi	r9,r4,12
 4042af4:	2c21883a 	add	r16,r5,r16
 4042af8:	2811883a 	mov	r8,r5
 4042afc:	200f883a 	mov	r7,r4
 4042b00:	41000017 	ldw	r4,0(r8)
 4042b04:	1fc00017 	ldw	ra,0(r3)
 4042b08:	63c00017 	ldw	r15,0(r12)
 4042b0c:	39000015 	stw	r4,0(r7)
 4042b10:	53800017 	ldw	r14,0(r10)
 4042b14:	6fc00015 	stw	ra,0(r13)
 4042b18:	5bc00015 	stw	r15,0(r11)
 4042b1c:	4b800015 	stw	r14,0(r9)
 4042b20:	18c00404 	addi	r3,r3,16
 4042b24:	39c00404 	addi	r7,r7,16
 4042b28:	42000404 	addi	r8,r8,16
 4042b2c:	6b400404 	addi	r13,r13,16
 4042b30:	63000404 	addi	r12,r12,16
 4042b34:	5ac00404 	addi	r11,r11,16
 4042b38:	52800404 	addi	r10,r10,16
 4042b3c:	4a400404 	addi	r9,r9,16
 4042b40:	1c3fef1e 	bne	r3,r16,4042b00 <__flash_rwdata_start+0xfffffc0c>
 4042b44:	89c00044 	addi	r7,r17,1
 4042b48:	380e913a 	slli	r7,r7,4
 4042b4c:	310003cc 	andi	r4,r6,15
 4042b50:	02c000c4 	movi	r11,3
 4042b54:	11c7883a 	add	r3,r2,r7
 4042b58:	29cb883a 	add	r5,r5,r7
 4042b5c:	5900212e 	bgeu	r11,r4,4042be4 <memcpy+0x140>
 4042b60:	1813883a 	mov	r9,r3
 4042b64:	2811883a 	mov	r8,r5
 4042b68:	200f883a 	mov	r7,r4
 4042b6c:	42800017 	ldw	r10,0(r8)
 4042b70:	4a400104 	addi	r9,r9,4
 4042b74:	39ffff04 	addi	r7,r7,-4
 4042b78:	4abfff15 	stw	r10,-4(r9)
 4042b7c:	42000104 	addi	r8,r8,4
 4042b80:	59fffa36 	bltu	r11,r7,4042b6c <__flash_rwdata_start+0xfffffc78>
 4042b84:	213fff04 	addi	r4,r4,-4
 4042b88:	2008d0ba 	srli	r4,r4,2
 4042b8c:	318000cc 	andi	r6,r6,3
 4042b90:	21000044 	addi	r4,r4,1
 4042b94:	2109883a 	add	r4,r4,r4
 4042b98:	2109883a 	add	r4,r4,r4
 4042b9c:	1907883a 	add	r3,r3,r4
 4042ba0:	290b883a 	add	r5,r5,r4
 4042ba4:	30000626 	beq	r6,zero,4042bc0 <memcpy+0x11c>
 4042ba8:	198d883a 	add	r6,r3,r6
 4042bac:	29c00003 	ldbu	r7,0(r5)
 4042bb0:	18c00044 	addi	r3,r3,1
 4042bb4:	29400044 	addi	r5,r5,1
 4042bb8:	19ffffc5 	stb	r7,-1(r3)
 4042bbc:	19bffb1e 	bne	r3,r6,4042bac <__flash_rwdata_start+0xfffffcb8>
 4042bc0:	dfc00217 	ldw	ra,8(sp)
 4042bc4:	dc400117 	ldw	r17,4(sp)
 4042bc8:	dc000017 	ldw	r16,0(sp)
 4042bcc:	dec00304 	addi	sp,sp,12
 4042bd0:	f800283a 	ret
 4042bd4:	2007883a 	mov	r3,r4
 4042bd8:	003ff206 	br	4042ba4 <__flash_rwdata_start+0xfffffcb0>
 4042bdc:	2007883a 	mov	r3,r4
 4042be0:	003ff106 	br	4042ba8 <__flash_rwdata_start+0xfffffcb4>
 4042be4:	200d883a 	mov	r6,r4
 4042be8:	003fee06 	br	4042ba4 <__flash_rwdata_start+0xfffffcb0>

04042bec <__register_exitproc>:
 4042bec:	defffa04 	addi	sp,sp,-24
 4042bf0:	dc000315 	stw	r16,12(sp)
 4042bf4:	04000034 	movhi	r16,0
 4042bf8:	8405b204 	addi	r16,r16,5832
 4042bfc:	80c00017 	ldw	r3,0(r16)
 4042c00:	dc400415 	stw	r17,16(sp)
 4042c04:	dfc00515 	stw	ra,20(sp)
 4042c08:	18805217 	ldw	r2,328(r3)
 4042c0c:	2023883a 	mov	r17,r4
 4042c10:	10003726 	beq	r2,zero,4042cf0 <__register_exitproc+0x104>
 4042c14:	10c00117 	ldw	r3,4(r2)
 4042c18:	010007c4 	movi	r4,31
 4042c1c:	20c00e16 	blt	r4,r3,4042c58 <__register_exitproc+0x6c>
 4042c20:	1a000044 	addi	r8,r3,1
 4042c24:	8800221e 	bne	r17,zero,4042cb0 <__register_exitproc+0xc4>
 4042c28:	18c00084 	addi	r3,r3,2
 4042c2c:	18c7883a 	add	r3,r3,r3
 4042c30:	18c7883a 	add	r3,r3,r3
 4042c34:	12000115 	stw	r8,4(r2)
 4042c38:	10c7883a 	add	r3,r2,r3
 4042c3c:	19400015 	stw	r5,0(r3)
 4042c40:	0005883a 	mov	r2,zero
 4042c44:	dfc00517 	ldw	ra,20(sp)
 4042c48:	dc400417 	ldw	r17,16(sp)
 4042c4c:	dc000317 	ldw	r16,12(sp)
 4042c50:	dec00604 	addi	sp,sp,24
 4042c54:	f800283a 	ret
 4042c58:	00800034 	movhi	r2,0
 4042c5c:	10800004 	addi	r2,r2,0
 4042c60:	10002626 	beq	r2,zero,4042cfc <__register_exitproc+0x110>
 4042c64:	01006404 	movi	r4,400
 4042c68:	d9400015 	stw	r5,0(sp)
 4042c6c:	d9800115 	stw	r6,4(sp)
 4042c70:	d9c00215 	stw	r7,8(sp)
 4042c74:	00000000 	call	0 <__alt_mem_DMEM>
 4042c78:	d9400017 	ldw	r5,0(sp)
 4042c7c:	d9800117 	ldw	r6,4(sp)
 4042c80:	d9c00217 	ldw	r7,8(sp)
 4042c84:	10001d26 	beq	r2,zero,4042cfc <__register_exitproc+0x110>
 4042c88:	81000017 	ldw	r4,0(r16)
 4042c8c:	10000115 	stw	zero,4(r2)
 4042c90:	02000044 	movi	r8,1
 4042c94:	22405217 	ldw	r9,328(r4)
 4042c98:	0007883a 	mov	r3,zero
 4042c9c:	12400015 	stw	r9,0(r2)
 4042ca0:	20805215 	stw	r2,328(r4)
 4042ca4:	10006215 	stw	zero,392(r2)
 4042ca8:	10006315 	stw	zero,396(r2)
 4042cac:	883fde26 	beq	r17,zero,4042c28 <__flash_rwdata_start+0xfffffd34>
 4042cb0:	18c9883a 	add	r4,r3,r3
 4042cb4:	2109883a 	add	r4,r4,r4
 4042cb8:	1109883a 	add	r4,r2,r4
 4042cbc:	21802215 	stw	r6,136(r4)
 4042cc0:	01800044 	movi	r6,1
 4042cc4:	12406217 	ldw	r9,392(r2)
 4042cc8:	30cc983a 	sll	r6,r6,r3
 4042ccc:	4992b03a 	or	r9,r9,r6
 4042cd0:	12406215 	stw	r9,392(r2)
 4042cd4:	21c04215 	stw	r7,264(r4)
 4042cd8:	01000084 	movi	r4,2
 4042cdc:	893fd21e 	bne	r17,r4,4042c28 <__flash_rwdata_start+0xfffffd34>
 4042ce0:	11006317 	ldw	r4,396(r2)
 4042ce4:	218cb03a 	or	r6,r4,r6
 4042ce8:	11806315 	stw	r6,396(r2)
 4042cec:	003fce06 	br	4042c28 <__flash_rwdata_start+0xfffffd34>
 4042cf0:	18805304 	addi	r2,r3,332
 4042cf4:	18805215 	stw	r2,328(r3)
 4042cf8:	003fc606 	br	4042c14 <__flash_rwdata_start+0xfffffd20>
 4042cfc:	00bfffc4 	movi	r2,-1
 4042d00:	003fd006 	br	4042c44 <__flash_rwdata_start+0xfffffd50>

04042d04 <__call_exitprocs>:
 4042d04:	defff504 	addi	sp,sp,-44
 4042d08:	df000915 	stw	fp,36(sp)
 4042d0c:	dd400615 	stw	r21,24(sp)
 4042d10:	dc800315 	stw	r18,12(sp)
 4042d14:	dfc00a15 	stw	ra,40(sp)
 4042d18:	ddc00815 	stw	r23,32(sp)
 4042d1c:	dd800715 	stw	r22,28(sp)
 4042d20:	dd000515 	stw	r20,20(sp)
 4042d24:	dcc00415 	stw	r19,16(sp)
 4042d28:	dc400215 	stw	r17,8(sp)
 4042d2c:	dc000115 	stw	r16,4(sp)
 4042d30:	d9000015 	stw	r4,0(sp)
 4042d34:	2839883a 	mov	fp,r5
 4042d38:	04800044 	movi	r18,1
 4042d3c:	057fffc4 	movi	r21,-1
 4042d40:	00800034 	movhi	r2,0
 4042d44:	1085b204 	addi	r2,r2,5832
 4042d48:	12000017 	ldw	r8,0(r2)
 4042d4c:	45005217 	ldw	r20,328(r8)
 4042d50:	44c05204 	addi	r19,r8,328
 4042d54:	a0001c26 	beq	r20,zero,4042dc8 <__call_exitprocs+0xc4>
 4042d58:	a0800117 	ldw	r2,4(r20)
 4042d5c:	15ffffc4 	addi	r23,r2,-1
 4042d60:	b8000d16 	blt	r23,zero,4042d98 <__call_exitprocs+0x94>
 4042d64:	14000044 	addi	r16,r2,1
 4042d68:	8421883a 	add	r16,r16,r16
 4042d6c:	8421883a 	add	r16,r16,r16
 4042d70:	84402004 	addi	r17,r16,128
 4042d74:	a463883a 	add	r17,r20,r17
 4042d78:	a421883a 	add	r16,r20,r16
 4042d7c:	e0001e26 	beq	fp,zero,4042df8 <__call_exitprocs+0xf4>
 4042d80:	80804017 	ldw	r2,256(r16)
 4042d84:	e0801c26 	beq	fp,r2,4042df8 <__call_exitprocs+0xf4>
 4042d88:	bdffffc4 	addi	r23,r23,-1
 4042d8c:	843fff04 	addi	r16,r16,-4
 4042d90:	8c7fff04 	addi	r17,r17,-4
 4042d94:	bd7ff91e 	bne	r23,r21,4042d7c <__flash_rwdata_start+0xfffffe88>
 4042d98:	00800034 	movhi	r2,0
 4042d9c:	10800004 	addi	r2,r2,0
 4042da0:	10000926 	beq	r2,zero,4042dc8 <__call_exitprocs+0xc4>
 4042da4:	a0800117 	ldw	r2,4(r20)
 4042da8:	1000301e 	bne	r2,zero,4042e6c <__call_exitprocs+0x168>
 4042dac:	a0800017 	ldw	r2,0(r20)
 4042db0:	10003226 	beq	r2,zero,4042e7c <__call_exitprocs+0x178>
 4042db4:	a009883a 	mov	r4,r20
 4042db8:	98800015 	stw	r2,0(r19)
 4042dbc:	00000000 	call	0 <__alt_mem_DMEM>
 4042dc0:	9d000017 	ldw	r20,0(r19)
 4042dc4:	a03fe41e 	bne	r20,zero,4042d58 <__flash_rwdata_start+0xfffffe64>
 4042dc8:	dfc00a17 	ldw	ra,40(sp)
 4042dcc:	df000917 	ldw	fp,36(sp)
 4042dd0:	ddc00817 	ldw	r23,32(sp)
 4042dd4:	dd800717 	ldw	r22,28(sp)
 4042dd8:	dd400617 	ldw	r21,24(sp)
 4042ddc:	dd000517 	ldw	r20,20(sp)
 4042de0:	dcc00417 	ldw	r19,16(sp)
 4042de4:	dc800317 	ldw	r18,12(sp)
 4042de8:	dc400217 	ldw	r17,8(sp)
 4042dec:	dc000117 	ldw	r16,4(sp)
 4042df0:	dec00b04 	addi	sp,sp,44
 4042df4:	f800283a 	ret
 4042df8:	a0800117 	ldw	r2,4(r20)
 4042dfc:	80c00017 	ldw	r3,0(r16)
 4042e00:	10bfffc4 	addi	r2,r2,-1
 4042e04:	15c01426 	beq	r2,r23,4042e58 <__call_exitprocs+0x154>
 4042e08:	80000015 	stw	zero,0(r16)
 4042e0c:	183fde26 	beq	r3,zero,4042d88 <__flash_rwdata_start+0xfffffe94>
 4042e10:	95c8983a 	sll	r4,r18,r23
 4042e14:	a0806217 	ldw	r2,392(r20)
 4042e18:	a5800117 	ldw	r22,4(r20)
 4042e1c:	2084703a 	and	r2,r4,r2
 4042e20:	10000b26 	beq	r2,zero,4042e50 <__call_exitprocs+0x14c>
 4042e24:	a0806317 	ldw	r2,396(r20)
 4042e28:	2088703a 	and	r4,r4,r2
 4042e2c:	20000c1e 	bne	r4,zero,4042e60 <__call_exitprocs+0x15c>
 4042e30:	89400017 	ldw	r5,0(r17)
 4042e34:	d9000017 	ldw	r4,0(sp)
 4042e38:	183ee83a 	callr	r3
 4042e3c:	a0800117 	ldw	r2,4(r20)
 4042e40:	15bfbf1e 	bne	r2,r22,4042d40 <__flash_rwdata_start+0xfffffe4c>
 4042e44:	98800017 	ldw	r2,0(r19)
 4042e48:	153fcf26 	beq	r2,r20,4042d88 <__flash_rwdata_start+0xfffffe94>
 4042e4c:	003fbc06 	br	4042d40 <__flash_rwdata_start+0xfffffe4c>
 4042e50:	183ee83a 	callr	r3
 4042e54:	003ff906 	br	4042e3c <__flash_rwdata_start+0xffffff48>
 4042e58:	a5c00115 	stw	r23,4(r20)
 4042e5c:	003feb06 	br	4042e0c <__flash_rwdata_start+0xffffff18>
 4042e60:	89000017 	ldw	r4,0(r17)
 4042e64:	183ee83a 	callr	r3
 4042e68:	003ff406 	br	4042e3c <__flash_rwdata_start+0xffffff48>
 4042e6c:	a0800017 	ldw	r2,0(r20)
 4042e70:	a027883a 	mov	r19,r20
 4042e74:	1029883a 	mov	r20,r2
 4042e78:	003fb606 	br	4042d54 <__flash_rwdata_start+0xfffffe60>
 4042e7c:	0005883a 	mov	r2,zero
 4042e80:	003ffb06 	br	4042e70 <__flash_rwdata_start+0xffffff7c>

04042e84 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4042e84:	defffd04 	addi	sp,sp,-12
 4042e88:	df000215 	stw	fp,8(sp)
 4042e8c:	df000204 	addi	fp,sp,8
 4042e90:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 4042e94:	0001883a 	nop
 4042e98:	e0bfff17 	ldw	r2,-4(fp)
 4042e9c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 4042ea0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4042ea4:	10000226 	beq	r2,zero,4042eb0 <_exit+0x2c>
    ALT_SIM_FAIL();
 4042ea8:	002af070 	cmpltui	zero,zero,43969
 4042eac:	00000106 	br	4042eb4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 4042eb0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4042eb4:	003fff06 	br	4042eb4 <__flash_rwdata_start+0xffffffc0>
